// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: codingService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/microkit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CodingService service

func NewCodingServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CodingService service

type CodingService interface {
	Create(ctx context.Context, in *Coding, opts ...client.CallOption) (*CodingResponse, error)
	Update(ctx context.Context, in *Coding, opts ...client.CallOption) (*CodingResponse, error)
	Search(ctx context.Context, in *CodingWhere, opts ...client.CallOption) (*CodingResponse, error)
	Delete(ctx context.Context, in *CodingWhere, opts ...client.CallOption) (*CodingResponse, error)
	Get(ctx context.Context, in *CodingWhere, opts ...client.CallOption) (*CodingResponse, error)
}

type codingService struct {
	c    client.Client
	name string
}

func NewCodingService(name string, c client.Client) CodingService {
	return &codingService{
		c:    c,
		name: name,
	}
}

func (c *codingService) Create(ctx context.Context, in *Coding, opts ...client.CallOption) (*CodingResponse, error) {
	req := c.c.NewRequest(c.name, "CodingService.Create", in)
	out := new(CodingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codingService) Update(ctx context.Context, in *Coding, opts ...client.CallOption) (*CodingResponse, error) {
	req := c.c.NewRequest(c.name, "CodingService.Update", in)
	out := new(CodingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codingService) Search(ctx context.Context, in *CodingWhere, opts ...client.CallOption) (*CodingResponse, error) {
	req := c.c.NewRequest(c.name, "CodingService.Search", in)
	out := new(CodingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codingService) Delete(ctx context.Context, in *CodingWhere, opts ...client.CallOption) (*CodingResponse, error) {
	req := c.c.NewRequest(c.name, "CodingService.Delete", in)
	out := new(CodingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codingService) Get(ctx context.Context, in *CodingWhere, opts ...client.CallOption) (*CodingResponse, error) {
	req := c.c.NewRequest(c.name, "CodingService.Get", in)
	out := new(CodingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CodingService service

type CodingServiceHandler interface {
	Create(context.Context, *Coding, *CodingResponse) error
	Update(context.Context, *Coding, *CodingResponse) error
	Search(context.Context, *CodingWhere, *CodingResponse) error
	Delete(context.Context, *CodingWhere, *CodingResponse) error
	Get(context.Context, *CodingWhere, *CodingResponse) error
}

func RegisterCodingServiceHandler(s server.Server, hdlr CodingServiceHandler, opts ...server.HandlerOption) error {
	type codingService interface {
		Create(ctx context.Context, in *Coding, out *CodingResponse) error
		Update(ctx context.Context, in *Coding, out *CodingResponse) error
		Search(ctx context.Context, in *CodingWhere, out *CodingResponse) error
		Delete(ctx context.Context, in *CodingWhere, out *CodingResponse) error
		Get(ctx context.Context, in *CodingWhere, out *CodingResponse) error
	}
	type CodingService struct {
		codingService
	}
	h := &codingServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CodingService{h}, opts...))
}

type codingServiceHandler struct {
	CodingServiceHandler
}

func (h *codingServiceHandler) Create(ctx context.Context, in *Coding, out *CodingResponse) error {
	return h.CodingServiceHandler.Create(ctx, in, out)
}

func (h *codingServiceHandler) Update(ctx context.Context, in *Coding, out *CodingResponse) error {
	return h.CodingServiceHandler.Update(ctx, in, out)
}

func (h *codingServiceHandler) Search(ctx context.Context, in *CodingWhere, out *CodingResponse) error {
	return h.CodingServiceHandler.Search(ctx, in, out)
}

func (h *codingServiceHandler) Delete(ctx context.Context, in *CodingWhere, out *CodingResponse) error {
	return h.CodingServiceHandler.Delete(ctx, in, out)
}

func (h *codingServiceHandler) Get(ctx context.Context, in *CodingWhere, out *CodingResponse) error {
	return h.CodingServiceHandler.Get(ctx, in, out)
}

// Api Endpoints for FrontCodingService service

func NewFrontCodingServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FrontCodingService service

type FrontCodingService interface {
	// 溯源码验证
	Verify(ctx context.Context, in *CodingWhere, opts ...client.CallOption) (*CodingResponse, error)
}

type frontCodingService struct {
	c    client.Client
	name string
}

func NewFrontCodingService(name string, c client.Client) FrontCodingService {
	return &frontCodingService{
		c:    c,
		name: name,
	}
}

func (c *frontCodingService) Verify(ctx context.Context, in *CodingWhere, opts ...client.CallOption) (*CodingResponse, error) {
	req := c.c.NewRequest(c.name, "FrontCodingService.Verify", in)
	out := new(CodingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FrontCodingService service

type FrontCodingServiceHandler interface {
	// 溯源码验证
	Verify(context.Context, *CodingWhere, *CodingResponse) error
}

func RegisterFrontCodingServiceHandler(s server.Server, hdlr FrontCodingServiceHandler, opts ...server.HandlerOption) error {
	type frontCodingService interface {
		Verify(ctx context.Context, in *CodingWhere, out *CodingResponse) error
	}
	type FrontCodingService struct {
		frontCodingService
	}
	h := &frontCodingServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FrontCodingService{h}, opts...))
}

type frontCodingServiceHandler struct {
	FrontCodingServiceHandler
}

func (h *frontCodingServiceHandler) Verify(ctx context.Context, in *CodingWhere, out *CodingResponse) error {
	return h.FrontCodingServiceHandler.Verify(ctx, in, out)
}
