// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: codeRecordService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/microkit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CodeRecordService service

func NewCodeRecordServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CodeRecordService service

type CodeRecordService interface {
	Search(ctx context.Context, in *CodeRecordWhere, opts ...client.CallOption) (*CodeRecordResponse, error)
	List(ctx context.Context, in *CodeRecordWhere, opts ...client.CallOption) (*CodeRecordResponse, error)
	Get(ctx context.Context, in *CodeRecordWhere, opts ...client.CallOption) (*CodeRecordResponse, error)
}

type codeRecordService struct {
	c    client.Client
	name string
}

func NewCodeRecordService(name string, c client.Client) CodeRecordService {
	return &codeRecordService{
		c:    c,
		name: name,
	}
}

func (c *codeRecordService) Search(ctx context.Context, in *CodeRecordWhere, opts ...client.CallOption) (*CodeRecordResponse, error) {
	req := c.c.NewRequest(c.name, "CodeRecordService.Search", in)
	out := new(CodeRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeRecordService) List(ctx context.Context, in *CodeRecordWhere, opts ...client.CallOption) (*CodeRecordResponse, error) {
	req := c.c.NewRequest(c.name, "CodeRecordService.List", in)
	out := new(CodeRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeRecordService) Get(ctx context.Context, in *CodeRecordWhere, opts ...client.CallOption) (*CodeRecordResponse, error) {
	req := c.c.NewRequest(c.name, "CodeRecordService.Get", in)
	out := new(CodeRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CodeRecordService service

type CodeRecordServiceHandler interface {
	Search(context.Context, *CodeRecordWhere, *CodeRecordResponse) error
	List(context.Context, *CodeRecordWhere, *CodeRecordResponse) error
	Get(context.Context, *CodeRecordWhere, *CodeRecordResponse) error
}

func RegisterCodeRecordServiceHandler(s server.Server, hdlr CodeRecordServiceHandler, opts ...server.HandlerOption) error {
	type codeRecordService interface {
		Search(ctx context.Context, in *CodeRecordWhere, out *CodeRecordResponse) error
		List(ctx context.Context, in *CodeRecordWhere, out *CodeRecordResponse) error
		Get(ctx context.Context, in *CodeRecordWhere, out *CodeRecordResponse) error
	}
	type CodeRecordService struct {
		codeRecordService
	}
	h := &codeRecordServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CodeRecordService{h}, opts...))
}

type codeRecordServiceHandler struct {
	CodeRecordServiceHandler
}

func (h *codeRecordServiceHandler) Search(ctx context.Context, in *CodeRecordWhere, out *CodeRecordResponse) error {
	return h.CodeRecordServiceHandler.Search(ctx, in, out)
}

func (h *codeRecordServiceHandler) List(ctx context.Context, in *CodeRecordWhere, out *CodeRecordResponse) error {
	return h.CodeRecordServiceHandler.List(ctx, in, out)
}

func (h *codeRecordServiceHandler) Get(ctx context.Context, in *CodeRecordWhere, out *CodeRecordResponse) error {
	return h.CodeRecordServiceHandler.Get(ctx, in, out)
}
