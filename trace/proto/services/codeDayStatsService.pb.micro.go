// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: codeDayStatsService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/microkit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CodeDayStatsService service

func NewCodeDayStatsServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CodeDayStatsService service

type CodeDayStatsService interface {
	Get(ctx context.Context, in *CodeDayStatsWhere, opts ...client.CallOption) (*CodeDayStatsResponse, error)
	Search(ctx context.Context, in *CodeDayStatsWhere, opts ...client.CallOption) (*CodeDayStatsResponse, error)
	List(ctx context.Context, in *CodeDayStatsWhere, opts ...client.CallOption) (*CodeDayStatsResponse, error)
}

type codeDayStatsService struct {
	c    client.Client
	name string
}

func NewCodeDayStatsService(name string, c client.Client) CodeDayStatsService {
	return &codeDayStatsService{
		c:    c,
		name: name,
	}
}

func (c *codeDayStatsService) Get(ctx context.Context, in *CodeDayStatsWhere, opts ...client.CallOption) (*CodeDayStatsResponse, error) {
	req := c.c.NewRequest(c.name, "CodeDayStatsService.Get", in)
	out := new(CodeDayStatsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeDayStatsService) Search(ctx context.Context, in *CodeDayStatsWhere, opts ...client.CallOption) (*CodeDayStatsResponse, error) {
	req := c.c.NewRequest(c.name, "CodeDayStatsService.Search", in)
	out := new(CodeDayStatsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeDayStatsService) List(ctx context.Context, in *CodeDayStatsWhere, opts ...client.CallOption) (*CodeDayStatsResponse, error) {
	req := c.c.NewRequest(c.name, "CodeDayStatsService.List", in)
	out := new(CodeDayStatsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CodeDayStatsService service

type CodeDayStatsServiceHandler interface {
	Get(context.Context, *CodeDayStatsWhere, *CodeDayStatsResponse) error
	Search(context.Context, *CodeDayStatsWhere, *CodeDayStatsResponse) error
	List(context.Context, *CodeDayStatsWhere, *CodeDayStatsResponse) error
}

func RegisterCodeDayStatsServiceHandler(s server.Server, hdlr CodeDayStatsServiceHandler, opts ...server.HandlerOption) error {
	type codeDayStatsService interface {
		Get(ctx context.Context, in *CodeDayStatsWhere, out *CodeDayStatsResponse) error
		Search(ctx context.Context, in *CodeDayStatsWhere, out *CodeDayStatsResponse) error
		List(ctx context.Context, in *CodeDayStatsWhere, out *CodeDayStatsResponse) error
	}
	type CodeDayStatsService struct {
		codeDayStatsService
	}
	h := &codeDayStatsServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CodeDayStatsService{h}, opts...))
}

type codeDayStatsServiceHandler struct {
	CodeDayStatsServiceHandler
}

func (h *codeDayStatsServiceHandler) Get(ctx context.Context, in *CodeDayStatsWhere, out *CodeDayStatsResponse) error {
	return h.CodeDayStatsServiceHandler.Get(ctx, in, out)
}

func (h *codeDayStatsServiceHandler) Search(ctx context.Context, in *CodeDayStatsWhere, out *CodeDayStatsResponse) error {
	return h.CodeDayStatsServiceHandler.Search(ctx, in, out)
}

func (h *codeDayStatsServiceHandler) List(ctx context.Context, in *CodeDayStatsWhere, out *CodeDayStatsResponse) error {
	return h.CodeDayStatsServiceHandler.List(ctx, in, out)
}
