// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: productBatchService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/microkit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ProductBatchService service

func NewProductBatchServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ProductBatchService service

type ProductBatchService interface {
	Create(ctx context.Context, in *ProductBatch, opts ...client.CallOption) (*ProductBatchResponse, error)
	Update(ctx context.Context, in *ProductBatch, opts ...client.CallOption) (*ProductBatchResponse, error)
	Search(ctx context.Context, in *ProductBatchWhere, opts ...client.CallOption) (*ProductBatchResponse, error)
	Delete(ctx context.Context, in *ProductBatchWhere, opts ...client.CallOption) (*ProductBatchResponse, error)
	Get(ctx context.Context, in *ProductBatchWhere, opts ...client.CallOption) (*ProductBatchResponse, error)
	SetStatus(ctx context.Context, in *ProductBatchWhere, opts ...client.CallOption) (*ProductBatchResponse, error)
	List(ctx context.Context, in *ProductBatchWhere, opts ...client.CallOption) (*ProductBatchResponse, error)
}

type productBatchService struct {
	c    client.Client
	name string
}

func NewProductBatchService(name string, c client.Client) ProductBatchService {
	return &productBatchService{
		c:    c,
		name: name,
	}
}

func (c *productBatchService) Create(ctx context.Context, in *ProductBatch, opts ...client.CallOption) (*ProductBatchResponse, error) {
	req := c.c.NewRequest(c.name, "ProductBatchService.Create", in)
	out := new(ProductBatchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productBatchService) Update(ctx context.Context, in *ProductBatch, opts ...client.CallOption) (*ProductBatchResponse, error) {
	req := c.c.NewRequest(c.name, "ProductBatchService.Update", in)
	out := new(ProductBatchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productBatchService) Search(ctx context.Context, in *ProductBatchWhere, opts ...client.CallOption) (*ProductBatchResponse, error) {
	req := c.c.NewRequest(c.name, "ProductBatchService.Search", in)
	out := new(ProductBatchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productBatchService) Delete(ctx context.Context, in *ProductBatchWhere, opts ...client.CallOption) (*ProductBatchResponse, error) {
	req := c.c.NewRequest(c.name, "ProductBatchService.Delete", in)
	out := new(ProductBatchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productBatchService) Get(ctx context.Context, in *ProductBatchWhere, opts ...client.CallOption) (*ProductBatchResponse, error) {
	req := c.c.NewRequest(c.name, "ProductBatchService.Get", in)
	out := new(ProductBatchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productBatchService) SetStatus(ctx context.Context, in *ProductBatchWhere, opts ...client.CallOption) (*ProductBatchResponse, error) {
	req := c.c.NewRequest(c.name, "ProductBatchService.SetStatus", in)
	out := new(ProductBatchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productBatchService) List(ctx context.Context, in *ProductBatchWhere, opts ...client.CallOption) (*ProductBatchResponse, error) {
	req := c.c.NewRequest(c.name, "ProductBatchService.List", in)
	out := new(ProductBatchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductBatchService service

type ProductBatchServiceHandler interface {
	Create(context.Context, *ProductBatch, *ProductBatchResponse) error
	Update(context.Context, *ProductBatch, *ProductBatchResponse) error
	Search(context.Context, *ProductBatchWhere, *ProductBatchResponse) error
	Delete(context.Context, *ProductBatchWhere, *ProductBatchResponse) error
	Get(context.Context, *ProductBatchWhere, *ProductBatchResponse) error
	SetStatus(context.Context, *ProductBatchWhere, *ProductBatchResponse) error
	List(context.Context, *ProductBatchWhere, *ProductBatchResponse) error
}

func RegisterProductBatchServiceHandler(s server.Server, hdlr ProductBatchServiceHandler, opts ...server.HandlerOption) error {
	type productBatchService interface {
		Create(ctx context.Context, in *ProductBatch, out *ProductBatchResponse) error
		Update(ctx context.Context, in *ProductBatch, out *ProductBatchResponse) error
		Search(ctx context.Context, in *ProductBatchWhere, out *ProductBatchResponse) error
		Delete(ctx context.Context, in *ProductBatchWhere, out *ProductBatchResponse) error
		Get(ctx context.Context, in *ProductBatchWhere, out *ProductBatchResponse) error
		SetStatus(ctx context.Context, in *ProductBatchWhere, out *ProductBatchResponse) error
		List(ctx context.Context, in *ProductBatchWhere, out *ProductBatchResponse) error
	}
	type ProductBatchService struct {
		productBatchService
	}
	h := &productBatchServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ProductBatchService{h}, opts...))
}

type productBatchServiceHandler struct {
	ProductBatchServiceHandler
}

func (h *productBatchServiceHandler) Create(ctx context.Context, in *ProductBatch, out *ProductBatchResponse) error {
	return h.ProductBatchServiceHandler.Create(ctx, in, out)
}

func (h *productBatchServiceHandler) Update(ctx context.Context, in *ProductBatch, out *ProductBatchResponse) error {
	return h.ProductBatchServiceHandler.Update(ctx, in, out)
}

func (h *productBatchServiceHandler) Search(ctx context.Context, in *ProductBatchWhere, out *ProductBatchResponse) error {
	return h.ProductBatchServiceHandler.Search(ctx, in, out)
}

func (h *productBatchServiceHandler) Delete(ctx context.Context, in *ProductBatchWhere, out *ProductBatchResponse) error {
	return h.ProductBatchServiceHandler.Delete(ctx, in, out)
}

func (h *productBatchServiceHandler) Get(ctx context.Context, in *ProductBatchWhere, out *ProductBatchResponse) error {
	return h.ProductBatchServiceHandler.Get(ctx, in, out)
}

func (h *productBatchServiceHandler) SetStatus(ctx context.Context, in *ProductBatchWhere, out *ProductBatchResponse) error {
	return h.ProductBatchServiceHandler.SetStatus(ctx, in, out)
}

func (h *productBatchServiceHandler) List(ctx context.Context, in *ProductBatchWhere, out *ProductBatchResponse) error {
	return h.ProductBatchServiceHandler.List(ctx, in, out)
}

// Api Endpoints for FrontProductBatchService service

func NewFrontProductBatchServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FrontProductBatchService service

type FrontProductBatchService interface {
	Get(ctx context.Context, in *ProductBatchWhere, opts ...client.CallOption) (*ProductBatchResponse, error)
}

type frontProductBatchService struct {
	c    client.Client
	name string
}

func NewFrontProductBatchService(name string, c client.Client) FrontProductBatchService {
	return &frontProductBatchService{
		c:    c,
		name: name,
	}
}

func (c *frontProductBatchService) Get(ctx context.Context, in *ProductBatchWhere, opts ...client.CallOption) (*ProductBatchResponse, error) {
	req := c.c.NewRequest(c.name, "FrontProductBatchService.Get", in)
	out := new(ProductBatchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FrontProductBatchService service

type FrontProductBatchServiceHandler interface {
	Get(context.Context, *ProductBatchWhere, *ProductBatchResponse) error
}

func RegisterFrontProductBatchServiceHandler(s server.Server, hdlr FrontProductBatchServiceHandler, opts ...server.HandlerOption) error {
	type frontProductBatchService interface {
		Get(ctx context.Context, in *ProductBatchWhere, out *ProductBatchResponse) error
	}
	type FrontProductBatchService struct {
		frontProductBatchService
	}
	h := &frontProductBatchServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FrontProductBatchService{h}, opts...))
}

type frontProductBatchServiceHandler struct {
	FrontProductBatchServiceHandler
}

func (h *frontProductBatchServiceHandler) Get(ctx context.Context, in *ProductBatchWhere, out *ProductBatchResponse) error {
	return h.FrontProductBatchServiceHandler.Get(ctx, in, out)
}
