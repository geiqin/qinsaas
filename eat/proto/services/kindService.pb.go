// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: kindService.proto

package services

import (
	common "github.com/geiqin/microkit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type KindWhere struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paged         int32   `protobuf:"varint,1,opt,name=paged,proto3" json:"paged,omitempty"`
	PageSize      int32   `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Top           int32   `protobuf:"varint,3,opt,name=top,proto3" json:"top,omitempty"`
	Id            int64   `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	Ids           []int64 `protobuf:"varint,5,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Type          string  `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	TagId         int32   `protobuf:"varint,7,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	TagIds        []int32 `protobuf:"varint,8,rep,packed,name=tag_ids,json=tagIds,proto3" json:"tag_ids,omitempty"`
	KindId        int64   `protobuf:"varint,9,opt,name=kind_id,json=kindId,proto3" json:"kind_id,omitempty"`                // 拖动的菜单ID(拖动菜单排序)
	DestKindId    int64   `protobuf:"varint,10,opt,name=dest_kind_id,json=destKindId,proto3" json:"dest_kind_id,omitempty"` // 被占位的菜单ID(拖动菜单排序)
	MinSort       int64   `protobuf:"varint,11,opt,name=min_sort,json=minSort,proto3" json:"min_sort,omitempty"`
	MaxSort       int64   `protobuf:"varint,12,opt,name=max_sort,json=maxSort,proto3" json:"max_sort,omitempty"`
	Keywords      string  `protobuf:"bytes,13,opt,name=keywords,proto3" json:"keywords,omitempty"`
	IsClient      bool    `protobuf:"varint,14,opt,name=is_client,json=isClient,proto3" json:"is_client,omitempty"` // 是否客户端展示
	RequireChoose bool    `protobuf:"varint,15,opt,name=require_choose,json=requireChoose,proto3" json:"require_choose,omitempty"`
}

func (x *KindWhere) Reset() {
	*x = KindWhere{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kindService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KindWhere) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KindWhere) ProtoMessage() {}

func (x *KindWhere) ProtoReflect() protoreflect.Message {
	mi := &file_kindService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KindWhere.ProtoReflect.Descriptor instead.
func (*KindWhere) Descriptor() ([]byte, []int) {
	return file_kindService_proto_rawDescGZIP(), []int{0}
}

func (x *KindWhere) GetPaged() int32 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *KindWhere) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *KindWhere) GetTop() int32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *KindWhere) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KindWhere) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *KindWhere) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *KindWhere) GetTagId() int32 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *KindWhere) GetTagIds() []int32 {
	if x != nil {
		return x.TagIds
	}
	return nil
}

func (x *KindWhere) GetKindId() int64 {
	if x != nil {
		return x.KindId
	}
	return 0
}

func (x *KindWhere) GetDestKindId() int64 {
	if x != nil {
		return x.DestKindId
	}
	return 0
}

func (x *KindWhere) GetMinSort() int64 {
	if x != nil {
		return x.MinSort
	}
	return 0
}

func (x *KindWhere) GetMaxSort() int64 {
	if x != nil {
		return x.MaxSort
	}
	return 0
}

func (x *KindWhere) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *KindWhere) GetIsClient() bool {
	if x != nil {
		return x.IsClient
	}
	return false
}

func (x *KindWhere) GetRequireChoose() bool {
	if x != nil {
		return x.RequireChoose
	}
	return false
}

type Kind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type              string          `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	TagId             int32           `protobuf:"varint,4,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	RequireChoose     bool            `protobuf:"varint,5,opt,name=require_choose,json=requireChoose,proto3" json:"require_choose,omitempty"`
	RequireLeastCount int32           `protobuf:"varint,6,opt,name=require_least_count,json=requireLeastCount,proto3" json:"require_least_count,omitempty"`
	IsSellTime        bool            `protobuf:"varint,7,opt,name=is_sell_time,json=isSellTime,proto3" json:"is_sell_time,omitempty"`
	WeekDays          string          `protobuf:"bytes,8,opt,name=week_days,json=weekDays,proto3" json:"week_days,omitempty"`
	Sort              int64           `protobuf:"varint,9,opt,name=sort,proto3" json:"sort,omitempty"`
	ItemCount         int32           `protobuf:"varint,10,opt,name=item_count,json=itemCount,proto3" json:"item_count,omitempty"`                          // 商品数量
	OnShelfItemCount  int32           `protobuf:"varint,11,opt,name=on_shelf_item_count,json=onShelfItemCount,proto3" json:"on_shelf_item_count,omitempty"` // 在售商品数量
	CreatedAt         string          `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         string          `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Tag               *KindTag        `protobuf:"bytes,14,opt,name=tag,proto3" json:"tag,omitempty"`
	KindSellTimes     []*KindSellTime `protobuf:"bytes,15,rep,name=kind_sell_times,json=kindSellTimes,proto3" json:"kind_sell_times,omitempty"`
}

func (x *Kind) Reset() {
	*x = Kind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kindService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kind) ProtoMessage() {}

func (x *Kind) ProtoReflect() protoreflect.Message {
	mi := &file_kindService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kind.ProtoReflect.Descriptor instead.
func (*Kind) Descriptor() ([]byte, []int) {
	return file_kindService_proto_rawDescGZIP(), []int{1}
}

func (x *Kind) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Kind) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Kind) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Kind) GetTagId() int32 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *Kind) GetRequireChoose() bool {
	if x != nil {
		return x.RequireChoose
	}
	return false
}

func (x *Kind) GetRequireLeastCount() int32 {
	if x != nil {
		return x.RequireLeastCount
	}
	return 0
}

func (x *Kind) GetIsSellTime() bool {
	if x != nil {
		return x.IsSellTime
	}
	return false
}

func (x *Kind) GetWeekDays() string {
	if x != nil {
		return x.WeekDays
	}
	return ""
}

func (x *Kind) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *Kind) GetItemCount() int32 {
	if x != nil {
		return x.ItemCount
	}
	return 0
}

func (x *Kind) GetOnShelfItemCount() int32 {
	if x != nil {
		return x.OnShelfItemCount
	}
	return 0
}

func (x *Kind) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Kind) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Kind) GetTag() *KindTag {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *Kind) GetKindSellTimes() []*KindSellTime {
	if x != nil {
		return x.KindSellTimes
	}
	return nil
}

type KindResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity *Kind         `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Pager  *common.Pager `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager,omitempty"`
	Items  []*Kind       `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	Error  *common.Error `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Info   *common.Info  `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *KindResponse) Reset() {
	*x = KindResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kindService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KindResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KindResponse) ProtoMessage() {}

func (x *KindResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kindService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KindResponse.ProtoReflect.Descriptor instead.
func (*KindResponse) Descriptor() ([]byte, []int) {
	return file_kindService_proto_rawDescGZIP(), []int{2}
}

func (x *KindResponse) GetEntity() *Kind {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *KindResponse) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *KindResponse) GetItems() []*Kind {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *KindResponse) GetError() *common.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *KindResponse) GetInfo() *common.Info {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_kindService_proto protoreflect.FileDescriptor

var file_kindService_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6b, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x11, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x14, 0x6b, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6b, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x6c, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x87, 0x03, 0x0a, 0x09, 0x4b, 0x69, 0x6e, 0x64, 0x57, 0x68, 0x65, 0x72, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x70, 0x61, 0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x74, 0x6f, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6b, 0x69,
	0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6b, 0x69, 0x6e,
	0x64, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x74, 0x4b,
	0x69, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x53, 0x6f, 0x72, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f,
	0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x22, 0xf0, 0x03, 0x0a, 0x04,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x61,
	0x67, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x63,
	0x68, 0x6f, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x4c, 0x65, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x65, 0x65, 0x6b, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x77, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x79, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x13,
	0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6f, 0x6e, 0x53, 0x68, 0x65,
	0x6c, 0x66, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x3e,
	0x0a, 0x0f, 0x6b, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x0d, 0x6b, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xc8,
	0x01, 0x0a, 0x0c, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x26, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x32, 0x8a, 0x03, 0x0a, 0x0d, 0x49, 0x6e,
	0x4b, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x57, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x57, 0x68, 0x65, 0x72,
	0x65, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x03, 0x47,
	0x65, 0x74, 0x12, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69,
	0x6e, 0x64, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x06,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x32, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x13,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x57, 0x68,
	0x65, 0x72, 0x65, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x57, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x16, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xb2, 0x01, 0x0a, 0x0f, 0x4d, 0x79, 0x49, 0x6e, 0x4b,
	0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4b, 0x69, 0x6e, 0x64, 0x57, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x57, 0x68, 0x65, 0x72, 0x65,
	0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x03, 0x47, 0x65,
	0x74, 0x12, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e,
	0x64, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x8b, 0x03, 0x0a, 0x0e,
	0x4f, 0x75, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37,
	0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x57, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x16, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x57,
	0x68, 0x65, 0x72, 0x65, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2f,
	0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x32, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x1a, 0x16, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e,
	0x64, 0x57, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x37, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x13, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x57, 0x68, 0x65, 0x72, 0x65, 0x1a,
	0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xb3, 0x01, 0x0a, 0x10, 0x4d, 0x79,
	0x4f, 0x75, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37,
	0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x57, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x16, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x57,
	0x68, 0x65, 0x72, 0x65, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2f,
	0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kindService_proto_rawDescOnce sync.Once
	file_kindService_proto_rawDescData = file_kindService_proto_rawDesc
)

func file_kindService_proto_rawDescGZIP() []byte {
	file_kindService_proto_rawDescOnce.Do(func() {
		file_kindService_proto_rawDescData = protoimpl.X.CompressGZIP(file_kindService_proto_rawDescData)
	})
	return file_kindService_proto_rawDescData
}

var file_kindService_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_kindService_proto_goTypes = []interface{}{
	(*KindWhere)(nil),    // 0: services.KindWhere
	(*Kind)(nil),         // 1: services.Kind
	(*KindResponse)(nil), // 2: services.KindResponse
	(*KindTag)(nil),      // 3: services.KindTag
	(*KindSellTime)(nil), // 4: services.KindSellTime
	(*common.Pager)(nil), // 5: common.Pager
	(*common.Error)(nil), // 6: common.Error
	(*common.Info)(nil),  // 7: common.Info
}
var file_kindService_proto_depIdxs = []int32{
	3,  // 0: services.Kind.tag:type_name -> services.KindTag
	4,  // 1: services.Kind.kind_sell_times:type_name -> services.KindSellTime
	1,  // 2: services.KindResponse.entity:type_name -> services.Kind
	5,  // 3: services.KindResponse.pager:type_name -> common.Pager
	1,  // 4: services.KindResponse.items:type_name -> services.Kind
	6,  // 5: services.KindResponse.error:type_name -> common.Error
	7,  // 6: services.KindResponse.info:type_name -> common.Info
	0,  // 7: services.InKindService.Search:input_type -> services.KindWhere
	0,  // 8: services.InKindService.List:input_type -> services.KindWhere
	1,  // 9: services.InKindService.Get:input_type -> services.Kind
	1,  // 10: services.InKindService.Create:input_type -> services.Kind
	1,  // 11: services.InKindService.Update:input_type -> services.Kind
	0,  // 12: services.InKindService.Delete:input_type -> services.KindWhere
	0,  // 13: services.InKindService.Resort:input_type -> services.KindWhere
	0,  // 14: services.MyInKindService.Search:input_type -> services.KindWhere
	0,  // 15: services.MyInKindService.List:input_type -> services.KindWhere
	1,  // 16: services.MyInKindService.Get:input_type -> services.Kind
	0,  // 17: services.OutKindService.Search:input_type -> services.KindWhere
	0,  // 18: services.OutKindService.List:input_type -> services.KindWhere
	1,  // 19: services.OutKindService.Get:input_type -> services.Kind
	1,  // 20: services.OutKindService.Create:input_type -> services.Kind
	1,  // 21: services.OutKindService.Update:input_type -> services.Kind
	0,  // 22: services.OutKindService.Delete:input_type -> services.KindWhere
	0,  // 23: services.OutKindService.Resort:input_type -> services.KindWhere
	0,  // 24: services.MyOutKindService.Search:input_type -> services.KindWhere
	0,  // 25: services.MyOutKindService.List:input_type -> services.KindWhere
	1,  // 26: services.MyOutKindService.Get:input_type -> services.Kind
	2,  // 27: services.InKindService.Search:output_type -> services.KindResponse
	2,  // 28: services.InKindService.List:output_type -> services.KindResponse
	2,  // 29: services.InKindService.Get:output_type -> services.KindResponse
	2,  // 30: services.InKindService.Create:output_type -> services.KindResponse
	2,  // 31: services.InKindService.Update:output_type -> services.KindResponse
	2,  // 32: services.InKindService.Delete:output_type -> services.KindResponse
	2,  // 33: services.InKindService.Resort:output_type -> services.KindResponse
	2,  // 34: services.MyInKindService.Search:output_type -> services.KindResponse
	2,  // 35: services.MyInKindService.List:output_type -> services.KindResponse
	2,  // 36: services.MyInKindService.Get:output_type -> services.KindResponse
	2,  // 37: services.OutKindService.Search:output_type -> services.KindResponse
	2,  // 38: services.OutKindService.List:output_type -> services.KindResponse
	2,  // 39: services.OutKindService.Get:output_type -> services.KindResponse
	2,  // 40: services.OutKindService.Create:output_type -> services.KindResponse
	2,  // 41: services.OutKindService.Update:output_type -> services.KindResponse
	2,  // 42: services.OutKindService.Delete:output_type -> services.KindResponse
	2,  // 43: services.OutKindService.Resort:output_type -> services.KindResponse
	2,  // 44: services.MyOutKindService.Search:output_type -> services.KindResponse
	2,  // 45: services.MyOutKindService.List:output_type -> services.KindResponse
	2,  // 46: services.MyOutKindService.Get:output_type -> services.KindResponse
	27, // [27:47] is the sub-list for method output_type
	7,  // [7:27] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_kindService_proto_init() }
func file_kindService_proto_init() {
	if File_kindService_proto != nil {
		return
	}
	file_kindTagService_proto_init()
	file_kindSellTimeService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kindService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KindWhere); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kindService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kindService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KindResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kindService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_kindService_proto_goTypes,
		DependencyIndexes: file_kindService_proto_depIdxs,
		MessageInfos:      file_kindService_proto_msgTypes,
	}.Build()
	File_kindService_proto = out.File
	file_kindService_proto_rawDesc = nil
	file_kindService_proto_goTypes = nil
	file_kindService_proto_depIdxs = nil
}
