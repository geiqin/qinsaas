// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: groupOrderService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/microkit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MyGroupOrderService service

func NewMyGroupOrderServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MyGroupOrderService service

type MyGroupOrderService interface {
	// 下单确认
	Confirm(ctx context.Context, in *BuyingRequest, opts ...client.CallOption) (*BuyingResponse, error)
	// 提交订单
	Submit(ctx context.Context, in *BuyingRequest, opts ...client.CallOption) (*OrderResponse, error)
}

type myGroupOrderService struct {
	c    client.Client
	name string
}

func NewMyGroupOrderService(name string, c client.Client) MyGroupOrderService {
	return &myGroupOrderService{
		c:    c,
		name: name,
	}
}

func (c *myGroupOrderService) Confirm(ctx context.Context, in *BuyingRequest, opts ...client.CallOption) (*BuyingResponse, error) {
	req := c.c.NewRequest(c.name, "MyGroupOrderService.Confirm", in)
	out := new(BuyingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myGroupOrderService) Submit(ctx context.Context, in *BuyingRequest, opts ...client.CallOption) (*OrderResponse, error) {
	req := c.c.NewRequest(c.name, "MyGroupOrderService.Submit", in)
	out := new(OrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyGroupOrderService service

type MyGroupOrderServiceHandler interface {
	// 下单确认
	Confirm(context.Context, *BuyingRequest, *BuyingResponse) error
	// 提交订单
	Submit(context.Context, *BuyingRequest, *OrderResponse) error
}

func RegisterMyGroupOrderServiceHandler(s server.Server, hdlr MyGroupOrderServiceHandler, opts ...server.HandlerOption) error {
	type myGroupOrderService interface {
		Confirm(ctx context.Context, in *BuyingRequest, out *BuyingResponse) error
		Submit(ctx context.Context, in *BuyingRequest, out *OrderResponse) error
	}
	type MyGroupOrderService struct {
		myGroupOrderService
	}
	h := &myGroupOrderServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MyGroupOrderService{h}, opts...))
}

type myGroupOrderServiceHandler struct {
	MyGroupOrderServiceHandler
}

func (h *myGroupOrderServiceHandler) Confirm(ctx context.Context, in *BuyingRequest, out *BuyingResponse) error {
	return h.MyGroupOrderServiceHandler.Confirm(ctx, in, out)
}

func (h *myGroupOrderServiceHandler) Submit(ctx context.Context, in *BuyingRequest, out *OrderResponse) error {
	return h.MyGroupOrderServiceHandler.Submit(ctx, in, out)
}

// Api Endpoints for GroupOrderService service

func NewGroupOrderServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GroupOrderService service

type GroupOrderService interface {
	// 拼团成团成功后的订单处理
	AfterGroupSuccess(ctx context.Context, in *ToGroupWhere, opts ...client.CallOption) (*ToGroupResponse, error)
	// 拼团成团失败的订单处理
	AfterGroupFail(ctx context.Context, in *ToGroupWhere, opts ...client.CallOption) (*ToGroupResponse, error)
}

type groupOrderService struct {
	c    client.Client
	name string
}

func NewGroupOrderService(name string, c client.Client) GroupOrderService {
	return &groupOrderService{
		c:    c,
		name: name,
	}
}

func (c *groupOrderService) AfterGroupSuccess(ctx context.Context, in *ToGroupWhere, opts ...client.CallOption) (*ToGroupResponse, error) {
	req := c.c.NewRequest(c.name, "GroupOrderService.AfterGroupSuccess", in)
	out := new(ToGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupOrderService) AfterGroupFail(ctx context.Context, in *ToGroupWhere, opts ...client.CallOption) (*ToGroupResponse, error) {
	req := c.c.NewRequest(c.name, "GroupOrderService.AfterGroupFail", in)
	out := new(ToGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GroupOrderService service

type GroupOrderServiceHandler interface {
	// 拼团成团成功后的订单处理
	AfterGroupSuccess(context.Context, *ToGroupWhere, *ToGroupResponse) error
	// 拼团成团失败的订单处理
	AfterGroupFail(context.Context, *ToGroupWhere, *ToGroupResponse) error
}

func RegisterGroupOrderServiceHandler(s server.Server, hdlr GroupOrderServiceHandler, opts ...server.HandlerOption) error {
	type groupOrderService interface {
		AfterGroupSuccess(ctx context.Context, in *ToGroupWhere, out *ToGroupResponse) error
		AfterGroupFail(ctx context.Context, in *ToGroupWhere, out *ToGroupResponse) error
	}
	type GroupOrderService struct {
		groupOrderService
	}
	h := &groupOrderServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&GroupOrderService{h}, opts...))
}

type groupOrderServiceHandler struct {
	GroupOrderServiceHandler
}

func (h *groupOrderServiceHandler) AfterGroupSuccess(ctx context.Context, in *ToGroupWhere, out *ToGroupResponse) error {
	return h.GroupOrderServiceHandler.AfterGroupSuccess(ctx, in, out)
}

func (h *groupOrderServiceHandler) AfterGroupFail(ctx context.Context, in *ToGroupWhere, out *ToGroupResponse) error {
	return h.GroupOrderServiceHandler.AfterGroupFail(ctx, in, out)
}
