// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: groupStatsDayService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/microkit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GroupStatsDayService service

func NewGroupStatsDayServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GroupStatsDayService service

type GroupStatsDayService interface {
	// 查询活动统计
	Search(ctx context.Context, in *GroupStatsWhere, opts ...client.CallOption) (*GroupStatsDayResponse, error)
	// 获取活动统计
	Get(ctx context.Context, in *GroupStatsWhere, opts ...client.CallOption) (*GroupStatsDayResponse, error)
	// 获取活动统计列表
	List(ctx context.Context, in *GroupStatsWhere, opts ...client.CallOption) (*GroupStatsDayResponse, error)
}

type groupStatsDayService struct {
	c    client.Client
	name string
}

func NewGroupStatsDayService(name string, c client.Client) GroupStatsDayService {
	return &groupStatsDayService{
		c:    c,
		name: name,
	}
}

func (c *groupStatsDayService) Search(ctx context.Context, in *GroupStatsWhere, opts ...client.CallOption) (*GroupStatsDayResponse, error) {
	req := c.c.NewRequest(c.name, "GroupStatsDayService.Search", in)
	out := new(GroupStatsDayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupStatsDayService) Get(ctx context.Context, in *GroupStatsWhere, opts ...client.CallOption) (*GroupStatsDayResponse, error) {
	req := c.c.NewRequest(c.name, "GroupStatsDayService.Get", in)
	out := new(GroupStatsDayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupStatsDayService) List(ctx context.Context, in *GroupStatsWhere, opts ...client.CallOption) (*GroupStatsDayResponse, error) {
	req := c.c.NewRequest(c.name, "GroupStatsDayService.List", in)
	out := new(GroupStatsDayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GroupStatsDayService service

type GroupStatsDayServiceHandler interface {
	// 查询活动统计
	Search(context.Context, *GroupStatsWhere, *GroupStatsDayResponse) error
	// 获取活动统计
	Get(context.Context, *GroupStatsWhere, *GroupStatsDayResponse) error
	// 获取活动统计列表
	List(context.Context, *GroupStatsWhere, *GroupStatsDayResponse) error
}

func RegisterGroupStatsDayServiceHandler(s server.Server, hdlr GroupStatsDayServiceHandler, opts ...server.HandlerOption) error {
	type groupStatsDayService interface {
		Search(ctx context.Context, in *GroupStatsWhere, out *GroupStatsDayResponse) error
		Get(ctx context.Context, in *GroupStatsWhere, out *GroupStatsDayResponse) error
		List(ctx context.Context, in *GroupStatsWhere, out *GroupStatsDayResponse) error
	}
	type GroupStatsDayService struct {
		groupStatsDayService
	}
	h := &groupStatsDayServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&GroupStatsDayService{h}, opts...))
}

type groupStatsDayServiceHandler struct {
	GroupStatsDayServiceHandler
}

func (h *groupStatsDayServiceHandler) Search(ctx context.Context, in *GroupStatsWhere, out *GroupStatsDayResponse) error {
	return h.GroupStatsDayServiceHandler.Search(ctx, in, out)
}

func (h *groupStatsDayServiceHandler) Get(ctx context.Context, in *GroupStatsWhere, out *GroupStatsDayResponse) error {
	return h.GroupStatsDayServiceHandler.Get(ctx, in, out)
}

func (h *groupStatsDayServiceHandler) List(ctx context.Context, in *GroupStatsWhere, out *GroupStatsDayResponse) error {
	return h.GroupStatsDayServiceHandler.List(ctx, in, out)
}
