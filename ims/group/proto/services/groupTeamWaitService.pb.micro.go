// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: groupTeamWaitService.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FrontGroupTeamWaitService service

func NewFrontGroupTeamWaitServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FrontGroupTeamWaitService service

type FrontGroupTeamWaitService interface {
	Search(ctx context.Context, in *GroupTeamWaitWhere, opts ...client.CallOption) (*GroupTeamResponse, error)
	List(ctx context.Context, in *GroupTeamWaitWhere, opts ...client.CallOption) (*GroupTeamResponse, error)
}

type frontGroupTeamWaitService struct {
	c    client.Client
	name string
}

func NewFrontGroupTeamWaitService(name string, c client.Client) FrontGroupTeamWaitService {
	return &frontGroupTeamWaitService{
		c:    c,
		name: name,
	}
}

func (c *frontGroupTeamWaitService) Search(ctx context.Context, in *GroupTeamWaitWhere, opts ...client.CallOption) (*GroupTeamResponse, error) {
	req := c.c.NewRequest(c.name, "FrontGroupTeamWaitService.Search", in)
	out := new(GroupTeamResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontGroupTeamWaitService) List(ctx context.Context, in *GroupTeamWaitWhere, opts ...client.CallOption) (*GroupTeamResponse, error) {
	req := c.c.NewRequest(c.name, "FrontGroupTeamWaitService.List", in)
	out := new(GroupTeamResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FrontGroupTeamWaitService service

type FrontGroupTeamWaitServiceHandler interface {
	Search(context.Context, *GroupTeamWaitWhere, *GroupTeamResponse) error
	List(context.Context, *GroupTeamWaitWhere, *GroupTeamResponse) error
}

func RegisterFrontGroupTeamWaitServiceHandler(s server.Server, hdlr FrontGroupTeamWaitServiceHandler, opts ...server.HandlerOption) error {
	type frontGroupTeamWaitService interface {
		Search(ctx context.Context, in *GroupTeamWaitWhere, out *GroupTeamResponse) error
		List(ctx context.Context, in *GroupTeamWaitWhere, out *GroupTeamResponse) error
	}
	type FrontGroupTeamWaitService struct {
		frontGroupTeamWaitService
	}
	h := &frontGroupTeamWaitServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FrontGroupTeamWaitService{h}, opts...))
}

type frontGroupTeamWaitServiceHandler struct {
	FrontGroupTeamWaitServiceHandler
}

func (h *frontGroupTeamWaitServiceHandler) Search(ctx context.Context, in *GroupTeamWaitWhere, out *GroupTeamResponse) error {
	return h.FrontGroupTeamWaitServiceHandler.Search(ctx, in, out)
}

func (h *frontGroupTeamWaitServiceHandler) List(ctx context.Context, in *GroupTeamWaitWhere, out *GroupTeamResponse) error {
	return h.FrontGroupTeamWaitServiceHandler.List(ctx, in, out)
}
