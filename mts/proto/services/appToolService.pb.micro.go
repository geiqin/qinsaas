// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: appToolService.proto

package services

import (
	_ "common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AppToolService service

func NewAppToolServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AppToolService service

type AppToolService interface {
	Create(ctx context.Context, in *AppTool, opts ...client.CallOption) (*AppToolResponse, error)
	Update(ctx context.Context, in *AppTool, opts ...client.CallOption) (*AppToolResponse, error)
	Delete(ctx context.Context, in *AppToolWhere, opts ...client.CallOption) (*AppToolResponse, error)
	Get(ctx context.Context, in *AppTool, opts ...client.CallOption) (*AppToolResponse, error)
	List(ctx context.Context, in *AppToolWhere, opts ...client.CallOption) (*AppToolResponse, error)
	Search(ctx context.Context, in *AppToolWhere, opts ...client.CallOption) (*AppToolResponse, error)
	// 禁用|启用应用工具 disabled=true禁用 disabled=false启用
	Disable(ctx context.Context, in *AppToolWhere, opts ...client.CallOption) (*AppToolResponse, error)
}

type appToolService struct {
	c    client.Client
	name string
}

func NewAppToolService(name string, c client.Client) AppToolService {
	return &appToolService{
		c:    c,
		name: name,
	}
}

func (c *appToolService) Create(ctx context.Context, in *AppTool, opts ...client.CallOption) (*AppToolResponse, error) {
	req := c.c.NewRequest(c.name, "AppToolService.Create", in)
	out := new(AppToolResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appToolService) Update(ctx context.Context, in *AppTool, opts ...client.CallOption) (*AppToolResponse, error) {
	req := c.c.NewRequest(c.name, "AppToolService.Update", in)
	out := new(AppToolResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appToolService) Delete(ctx context.Context, in *AppToolWhere, opts ...client.CallOption) (*AppToolResponse, error) {
	req := c.c.NewRequest(c.name, "AppToolService.Delete", in)
	out := new(AppToolResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appToolService) Get(ctx context.Context, in *AppTool, opts ...client.CallOption) (*AppToolResponse, error) {
	req := c.c.NewRequest(c.name, "AppToolService.Get", in)
	out := new(AppToolResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appToolService) List(ctx context.Context, in *AppToolWhere, opts ...client.CallOption) (*AppToolResponse, error) {
	req := c.c.NewRequest(c.name, "AppToolService.List", in)
	out := new(AppToolResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appToolService) Search(ctx context.Context, in *AppToolWhere, opts ...client.CallOption) (*AppToolResponse, error) {
	req := c.c.NewRequest(c.name, "AppToolService.Search", in)
	out := new(AppToolResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appToolService) Disable(ctx context.Context, in *AppToolWhere, opts ...client.CallOption) (*AppToolResponse, error) {
	req := c.c.NewRequest(c.name, "AppToolService.Disable", in)
	out := new(AppToolResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppToolService service

type AppToolServiceHandler interface {
	Create(context.Context, *AppTool, *AppToolResponse) error
	Update(context.Context, *AppTool, *AppToolResponse) error
	Delete(context.Context, *AppToolWhere, *AppToolResponse) error
	Get(context.Context, *AppTool, *AppToolResponse) error
	List(context.Context, *AppToolWhere, *AppToolResponse) error
	Search(context.Context, *AppToolWhere, *AppToolResponse) error
	// 禁用|启用应用工具 disabled=true禁用 disabled=false启用
	Disable(context.Context, *AppToolWhere, *AppToolResponse) error
}

func RegisterAppToolServiceHandler(s server.Server, hdlr AppToolServiceHandler, opts ...server.HandlerOption) error {
	type appToolService interface {
		Create(ctx context.Context, in *AppTool, out *AppToolResponse) error
		Update(ctx context.Context, in *AppTool, out *AppToolResponse) error
		Delete(ctx context.Context, in *AppToolWhere, out *AppToolResponse) error
		Get(ctx context.Context, in *AppTool, out *AppToolResponse) error
		List(ctx context.Context, in *AppToolWhere, out *AppToolResponse) error
		Search(ctx context.Context, in *AppToolWhere, out *AppToolResponse) error
		Disable(ctx context.Context, in *AppToolWhere, out *AppToolResponse) error
	}
	type AppToolService struct {
		appToolService
	}
	h := &appToolServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AppToolService{h}, opts...))
}

type appToolServiceHandler struct {
	AppToolServiceHandler
}

func (h *appToolServiceHandler) Create(ctx context.Context, in *AppTool, out *AppToolResponse) error {
	return h.AppToolServiceHandler.Create(ctx, in, out)
}

func (h *appToolServiceHandler) Update(ctx context.Context, in *AppTool, out *AppToolResponse) error {
	return h.AppToolServiceHandler.Update(ctx, in, out)
}

func (h *appToolServiceHandler) Delete(ctx context.Context, in *AppToolWhere, out *AppToolResponse) error {
	return h.AppToolServiceHandler.Delete(ctx, in, out)
}

func (h *appToolServiceHandler) Get(ctx context.Context, in *AppTool, out *AppToolResponse) error {
	return h.AppToolServiceHandler.Get(ctx, in, out)
}

func (h *appToolServiceHandler) List(ctx context.Context, in *AppToolWhere, out *AppToolResponse) error {
	return h.AppToolServiceHandler.List(ctx, in, out)
}

func (h *appToolServiceHandler) Search(ctx context.Context, in *AppToolWhere, out *AppToolResponse) error {
	return h.AppToolServiceHandler.Search(ctx, in, out)
}

func (h *appToolServiceHandler) Disable(ctx context.Context, in *AppToolWhere, out *AppToolResponse) error {
	return h.AppToolServiceHandler.Disable(ctx, in, out)
}
