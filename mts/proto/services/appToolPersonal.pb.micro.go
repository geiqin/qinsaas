// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: appToolPersonal.proto

package services

import (
	_ "common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AppToolPersonalService service

func NewAppToolPersonalServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AppToolPersonalService service

type AppToolPersonalService interface {
	Save(ctx context.Context, in *AppToolPersonalWhere, opts ...client.CallOption) (*AppToolPersonalResponse, error)
	List(ctx context.Context, in *AppToolPersonalWhere, opts ...client.CallOption) (*AppToolPersonalResponse, error)
}

type appToolPersonalService struct {
	c    client.Client
	name string
}

func NewAppToolPersonalService(name string, c client.Client) AppToolPersonalService {
	return &appToolPersonalService{
		c:    c,
		name: name,
	}
}

func (c *appToolPersonalService) Save(ctx context.Context, in *AppToolPersonalWhere, opts ...client.CallOption) (*AppToolPersonalResponse, error) {
	req := c.c.NewRequest(c.name, "AppToolPersonalService.Save", in)
	out := new(AppToolPersonalResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appToolPersonalService) List(ctx context.Context, in *AppToolPersonalWhere, opts ...client.CallOption) (*AppToolPersonalResponse, error) {
	req := c.c.NewRequest(c.name, "AppToolPersonalService.List", in)
	out := new(AppToolPersonalResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppToolPersonalService service

type AppToolPersonalServiceHandler interface {
	Save(context.Context, *AppToolPersonalWhere, *AppToolPersonalResponse) error
	List(context.Context, *AppToolPersonalWhere, *AppToolPersonalResponse) error
}

func RegisterAppToolPersonalServiceHandler(s server.Server, hdlr AppToolPersonalServiceHandler, opts ...server.HandlerOption) error {
	type appToolPersonalService interface {
		Save(ctx context.Context, in *AppToolPersonalWhere, out *AppToolPersonalResponse) error
		List(ctx context.Context, in *AppToolPersonalWhere, out *AppToolPersonalResponse) error
	}
	type AppToolPersonalService struct {
		appToolPersonalService
	}
	h := &appToolPersonalServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AppToolPersonalService{h}, opts...))
}

type appToolPersonalServiceHandler struct {
	AppToolPersonalServiceHandler
}

func (h *appToolPersonalServiceHandler) Save(ctx context.Context, in *AppToolPersonalWhere, out *AppToolPersonalResponse) error {
	return h.AppToolPersonalServiceHandler.Save(ctx, in, out)
}

func (h *appToolPersonalServiceHandler) List(ctx context.Context, in *AppToolPersonalWhere, out *AppToolPersonalResponse) error {
	return h.AppToolPersonalServiceHandler.List(ctx, in, out)
}
