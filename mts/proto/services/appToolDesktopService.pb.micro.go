// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: appToolDesktopService.proto

package services

import (
	_ "github.com/geiqin/microkit/protobuf/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AppToolDesktopService service

func NewAppToolDesktopServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AppToolDesktopService service

type AppToolDesktopService interface {
	Create(ctx context.Context, in *AppToolDesktop, opts ...client.CallOption) (*AppToolDesktopResponse, error)
	Delete(ctx context.Context, in *AppToolDesktopWhere, opts ...client.CallOption) (*AppToolDesktopResponse, error)
	List(ctx context.Context, in *AppToolDesktopWhere, opts ...client.CallOption) (*AppToolDesktopResponse, error)
	Search(ctx context.Context, in *AppToolDesktopWhere, opts ...client.CallOption) (*AppToolDesktopResponse, error)
	ChangeSort(ctx context.Context, in *AppToolDesktop, opts ...client.CallOption) (*AppToolDesktopResponse, error)
}

type appToolDesktopService struct {
	c    client.Client
	name string
}

func NewAppToolDesktopService(name string, c client.Client) AppToolDesktopService {
	return &appToolDesktopService{
		c:    c,
		name: name,
	}
}

func (c *appToolDesktopService) Create(ctx context.Context, in *AppToolDesktop, opts ...client.CallOption) (*AppToolDesktopResponse, error) {
	req := c.c.NewRequest(c.name, "AppToolDesktopService.Create", in)
	out := new(AppToolDesktopResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appToolDesktopService) Delete(ctx context.Context, in *AppToolDesktopWhere, opts ...client.CallOption) (*AppToolDesktopResponse, error) {
	req := c.c.NewRequest(c.name, "AppToolDesktopService.Delete", in)
	out := new(AppToolDesktopResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appToolDesktopService) List(ctx context.Context, in *AppToolDesktopWhere, opts ...client.CallOption) (*AppToolDesktopResponse, error) {
	req := c.c.NewRequest(c.name, "AppToolDesktopService.List", in)
	out := new(AppToolDesktopResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appToolDesktopService) Search(ctx context.Context, in *AppToolDesktopWhere, opts ...client.CallOption) (*AppToolDesktopResponse, error) {
	req := c.c.NewRequest(c.name, "AppToolDesktopService.Search", in)
	out := new(AppToolDesktopResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appToolDesktopService) ChangeSort(ctx context.Context, in *AppToolDesktop, opts ...client.CallOption) (*AppToolDesktopResponse, error) {
	req := c.c.NewRequest(c.name, "AppToolDesktopService.ChangeSort", in)
	out := new(AppToolDesktopResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppToolDesktopService service

type AppToolDesktopServiceHandler interface {
	Create(context.Context, *AppToolDesktop, *AppToolDesktopResponse) error
	Delete(context.Context, *AppToolDesktopWhere, *AppToolDesktopResponse) error
	List(context.Context, *AppToolDesktopWhere, *AppToolDesktopResponse) error
	Search(context.Context, *AppToolDesktopWhere, *AppToolDesktopResponse) error
	ChangeSort(context.Context, *AppToolDesktop, *AppToolDesktopResponse) error
}

func RegisterAppToolDesktopServiceHandler(s server.Server, hdlr AppToolDesktopServiceHandler, opts ...server.HandlerOption) error {
	type appToolDesktopService interface {
		Create(ctx context.Context, in *AppToolDesktop, out *AppToolDesktopResponse) error
		Delete(ctx context.Context, in *AppToolDesktopWhere, out *AppToolDesktopResponse) error
		List(ctx context.Context, in *AppToolDesktopWhere, out *AppToolDesktopResponse) error
		Search(ctx context.Context, in *AppToolDesktopWhere, out *AppToolDesktopResponse) error
		ChangeSort(ctx context.Context, in *AppToolDesktop, out *AppToolDesktopResponse) error
	}
	type AppToolDesktopService struct {
		appToolDesktopService
	}
	h := &appToolDesktopServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AppToolDesktopService{h}, opts...))
}

type appToolDesktopServiceHandler struct {
	AppToolDesktopServiceHandler
}

func (h *appToolDesktopServiceHandler) Create(ctx context.Context, in *AppToolDesktop, out *AppToolDesktopResponse) error {
	return h.AppToolDesktopServiceHandler.Create(ctx, in, out)
}

func (h *appToolDesktopServiceHandler) Delete(ctx context.Context, in *AppToolDesktopWhere, out *AppToolDesktopResponse) error {
	return h.AppToolDesktopServiceHandler.Delete(ctx, in, out)
}

func (h *appToolDesktopServiceHandler) List(ctx context.Context, in *AppToolDesktopWhere, out *AppToolDesktopResponse) error {
	return h.AppToolDesktopServiceHandler.List(ctx, in, out)
}

func (h *appToolDesktopServiceHandler) Search(ctx context.Context, in *AppToolDesktopWhere, out *AppToolDesktopResponse) error {
	return h.AppToolDesktopServiceHandler.Search(ctx, in, out)
}

func (h *appToolDesktopServiceHandler) ChangeSort(ctx context.Context, in *AppToolDesktop, out *AppToolDesktopResponse) error {
	return h.AppToolDesktopServiceHandler.ChangeSort(ctx, in, out)
}
