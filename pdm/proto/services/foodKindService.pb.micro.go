// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: foodKindService.proto

package services

import (
	fmt "fmt"
	common "geiqin.saas.pdm/app/proto/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FrontOutFoodKindService service

func NewFrontOutFoodKindServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FrontOutFoodKindService service

type FrontOutFoodKindService interface {
	List(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*FoodKindResponse, error)
}

type frontOutFoodKindService struct {
	c    client.Client
	name string
}

func NewFrontOutFoodKindService(name string, c client.Client) FrontOutFoodKindService {
	return &frontOutFoodKindService{
		c:    c,
		name: name,
	}
}

func (c *frontOutFoodKindService) List(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*FoodKindResponse, error) {
	req := c.c.NewRequest(c.name, "FrontOutFoodKindService.List", in)
	out := new(FoodKindResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FrontOutFoodKindService service

type FrontOutFoodKindServiceHandler interface {
	List(context.Context, *common.Empty, *FoodKindResponse) error
}

func RegisterFrontOutFoodKindServiceHandler(s server.Server, hdlr FrontOutFoodKindServiceHandler, opts ...server.HandlerOption) error {
	type frontOutFoodKindService interface {
		List(ctx context.Context, in *common.Empty, out *FoodKindResponse) error
	}
	type FrontOutFoodKindService struct {
		frontOutFoodKindService
	}
	h := &frontOutFoodKindServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FrontOutFoodKindService{h}, opts...))
}

type frontOutFoodKindServiceHandler struct {
	FrontOutFoodKindServiceHandler
}

func (h *frontOutFoodKindServiceHandler) List(ctx context.Context, in *common.Empty, out *FoodKindResponse) error {
	return h.FrontOutFoodKindServiceHandler.List(ctx, in, out)
}

// Api Endpoints for FrontInFoodKindService service

func NewFrontInFoodKindServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FrontInFoodKindService service

type FrontInFoodKindService interface {
	List(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*FoodKindResponse, error)
}

type frontInFoodKindService struct {
	c    client.Client
	name string
}

func NewFrontInFoodKindService(name string, c client.Client) FrontInFoodKindService {
	return &frontInFoodKindService{
		c:    c,
		name: name,
	}
}

func (c *frontInFoodKindService) List(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*FoodKindResponse, error) {
	req := c.c.NewRequest(c.name, "FrontInFoodKindService.List", in)
	out := new(FoodKindResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FrontInFoodKindService service

type FrontInFoodKindServiceHandler interface {
	List(context.Context, *common.Empty, *FoodKindResponse) error
}

func RegisterFrontInFoodKindServiceHandler(s server.Server, hdlr FrontInFoodKindServiceHandler, opts ...server.HandlerOption) error {
	type frontInFoodKindService interface {
		List(ctx context.Context, in *common.Empty, out *FoodKindResponse) error
	}
	type FrontInFoodKindService struct {
		frontInFoodKindService
	}
	h := &frontInFoodKindServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FrontInFoodKindService{h}, opts...))
}

type frontInFoodKindServiceHandler struct {
	FrontInFoodKindServiceHandler
}

func (h *frontInFoodKindServiceHandler) List(ctx context.Context, in *common.Empty, out *FoodKindResponse) error {
	return h.FrontInFoodKindServiceHandler.List(ctx, in, out)
}
