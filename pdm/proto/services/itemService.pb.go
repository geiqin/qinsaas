// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: itemService.proto

package services

import (
	common "github.com/geiqin/microkit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Unit              string  `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	ItemSn            string  `protobuf:"bytes,4,opt,name=item_sn,json=itemSn,proto3" json:"item_sn,omitempty"`
	BrandId           int32   `protobuf:"varint,5,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	TaxonomyId        int64   `protobuf:"varint,6,opt,name=taxonomy_id,json=taxonomyId,proto3" json:"taxonomy_id,omitempty"`
	BuyQuota          int32   `protobuf:"varint,7,opt,name=buy_quota,json=buyQuota,proto3" json:"buy_quota,omitempty"`
	Quantity          int32   `protobuf:"varint,8,opt,name=quantity,proto3" json:"quantity,omitempty"`
	SoldNum           int32   `protobuf:"varint,9,opt,name=sold_num,json=soldNum,proto3" json:"sold_num,omitempty"`
	InitSoldNum       int32   `protobuf:"varint,10,opt,name=init_sold_num,json=initSoldNum,proto3" json:"init_sold_num,omitempty"`
	ModelType         string  `protobuf:"bytes,11,opt,name=model_type,json=modelType,proto3" json:"model_type,omitempty"`
	Listed            bool    `protobuf:"varint,12,opt,name=listed,proto3" json:"listed,omitempty"`
	Locked            bool    `protobuf:"varint,13,opt,name=locked,proto3" json:"locked,omitempty"`
	HideStock         bool    `protobuf:"varint,14,opt,name=hide_stock,json=hideStock,proto3" json:"hide_stock,omitempty"`
	JoinLevelDiscount bool    `protobuf:"varint,15,opt,name=join_level_discount,json=joinLevelDiscount,proto3" json:"join_level_discount,omitempty"`
	PurchaseRight     bool    `protobuf:"varint,16,opt,name=purchase_right,json=purchaseRight,proto3" json:"purchase_right,omitempty"`
	AutoListingTime   string  `protobuf:"bytes,17,opt,name=auto_listing_time,json=autoListingTime,proto3" json:"auto_listing_time,omitempty"`
	OutItemNo         string  `protobuf:"bytes,18,opt,name=out_item_no,json=outItemNo,proto3" json:"out_item_no,omitempty"`
	Content           string  `protobuf:"bytes,19,opt,name=content,proto3" json:"content,omitempty"`
	Summary           string  `protobuf:"bytes,20,opt,name=summary,proto3" json:"summary,omitempty"`
	SellingPoint      string  `protobuf:"bytes,21,opt,name=selling_point,json=sellingPoint,proto3" json:"selling_point,omitempty"`
	MinBuy            int32   `protobuf:"varint,22,opt,name=min_buy,json=minBuy,proto3" json:"min_buy,omitempty"`
	NostoreSell       bool    `protobuf:"varint,23,opt,name=nostore_sell,json=nostoreSell,proto3" json:"nostore_sell,omitempty"`
	ThumbId           int64   `protobuf:"varint,24,opt,name=thumb_id,json=thumbId,proto3" json:"thumb_id,omitempty"`
	ThumbUrl          string  `protobuf:"bytes,25,opt,name=thumb_url,json=thumbUrl,proto3" json:"thumb_url,omitempty"`
	TemplateId        int32   `protobuf:"varint,26,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	Barcode           string  `protobuf:"bytes,27,opt,name=barcode,proto3" json:"barcode,omitempty"`
	Price             float32 `protobuf:"fixed32,28,opt,name=price,proto3" json:"price,omitempty"`
	OriginPrice       float32 `protobuf:"fixed32,29,opt,name=origin_price,json=originPrice,proto3" json:"origin_price,omitempty"`
	CostPrice         float32 `protobuf:"fixed32,30,opt,name=cost_price,json=costPrice,proto3" json:"cost_price,omitempty"`
	MinPrice          float32 `protobuf:"fixed32,31,opt,name=min_price,json=minPrice,proto3" json:"min_price,omitempty"`
	MaxPrice          float32 `protobuf:"fixed32,32,opt,name=max_price,json=maxPrice,proto3" json:"max_price,omitempty"`
	Weight            float32 `protobuf:"fixed32,33,opt,name=weight,proto3" json:"weight,omitempty"`
	ReviewNum         int32   `protobuf:"varint,34,opt,name=review_num,json=reviewNum,proto3" json:"review_num,omitempty"`
	ViewCount         int32   `protobuf:"varint,35,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
	BuyCount          int32   `protobuf:"varint,36,opt,name=buy_count,json=buyCount,proto3" json:"buy_count,omitempty"`
	Sorting           int32   `protobuf:"varint,37,opt,name=sorting,proto3" json:"sorting,omitempty"`
	ListedAt          string  `protobuf:"bytes,38,opt,name=listed_at,json=listedAt,proto3" json:"listed_at,omitempty"`
	CreatedAt         string  `protobuf:"bytes,39,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         string  `protobuf:"bytes,40,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Brand             *Brand  `protobuf:"bytes,41,opt,name=brand,proto3" json:"brand,omitempty"`
	// @inject_tag: gorm:"many2many:item_cats;"
	Cats []*Cat `protobuf:"bytes,42,rep,name=cats,proto3" json:"cats,omitempty" gorm:"many2many:item_cats;"`
	// @inject_tag: gorm:"many2many:item_tags;"
	Tags        []*Tag           `protobuf:"bytes,43,rep,name=tags,proto3" json:"tags,omitempty" gorm:"many2many:item_tags;"`
	Skus        []*Sku           `protobuf:"bytes,44,rep,name=skus,proto3" json:"skus,omitempty"`
	Galleries   []*ItemGallery   `protobuf:"bytes,45,rep,name=galleries,proto3" json:"galleries,omitempty"`
	Prices      []*ItemPrice     `protobuf:"bytes,46,rep,name=prices,proto3" json:"prices,omitempty"`
	Rights      []*ItemRight     `protobuf:"bytes,47,rep,name=rights,proto3" json:"rights,omitempty"`
	SpecIndexes []*SpecItemIndex `protobuf:"bytes,48,rep,name=spec_indexes,json=specIndexes,proto3" json:"spec_indexes,omitempty"` //规格更新专用
	Ids         []int64          `protobuf:"varint,49,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	// @inject_tag: gorm:"many2many:spec_item_indices;"
	Specs       []*Spec      `protobuf:"bytes,50,rep,name=specs,proto3" json:"specs,omitempty" gorm:"many2many:spec_item_indices;"` //(详情显示专用)
	Skuitem     *Sku         `protobuf:"bytes,51,opt,name=skuitem,proto3" json:"skuitem,omitempty"`                                 //单一规格商品（在购物车，营销活动等场景用到）
	SkuId       int64        `protobuf:"varint,52,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`                       //单一规格商品输入参数（在获取规格商品时使用）
	IsPresale   bool         `protobuf:"varint,53,opt,name=is_presale,json=isPresale,proto3" json:"is_presale,omitempty"`
	ItemPresale *ItemPresale `protobuf:"bytes,54,opt,name=item_presale,json=itemPresale,proto3" json:"item_presale,omitempty"`
	IsSku       bool         `protobuf:"varint,55,opt,name=is_sku,json=isSku,proto3" json:"is_sku,omitempty"` // 是否多规格商品
	Food        *Food        `protobuf:"bytes,56,opt,name=food,proto3" json:"food,omitempty"`                 // 餐饮商品附加信息
	VideoId     int64        `protobuf:"varint,57,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	VideoUrl    string       `protobuf:"bytes,58,opt,name=video_url,json=videoUrl,proto3" json:"video_url,omitempty"`
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_itemService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_itemService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_itemService_proto_rawDescGZIP(), []int{0}
}

func (x *Item) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Item) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Item) GetItemSn() string {
	if x != nil {
		return x.ItemSn
	}
	return ""
}

func (x *Item) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *Item) GetTaxonomyId() int64 {
	if x != nil {
		return x.TaxonomyId
	}
	return 0
}

func (x *Item) GetBuyQuota() int32 {
	if x != nil {
		return x.BuyQuota
	}
	return 0
}

func (x *Item) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Item) GetSoldNum() int32 {
	if x != nil {
		return x.SoldNum
	}
	return 0
}

func (x *Item) GetInitSoldNum() int32 {
	if x != nil {
		return x.InitSoldNum
	}
	return 0
}

func (x *Item) GetModelType() string {
	if x != nil {
		return x.ModelType
	}
	return ""
}

func (x *Item) GetListed() bool {
	if x != nil {
		return x.Listed
	}
	return false
}

func (x *Item) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *Item) GetHideStock() bool {
	if x != nil {
		return x.HideStock
	}
	return false
}

func (x *Item) GetJoinLevelDiscount() bool {
	if x != nil {
		return x.JoinLevelDiscount
	}
	return false
}

func (x *Item) GetPurchaseRight() bool {
	if x != nil {
		return x.PurchaseRight
	}
	return false
}

func (x *Item) GetAutoListingTime() string {
	if x != nil {
		return x.AutoListingTime
	}
	return ""
}

func (x *Item) GetOutItemNo() string {
	if x != nil {
		return x.OutItemNo
	}
	return ""
}

func (x *Item) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Item) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Item) GetSellingPoint() string {
	if x != nil {
		return x.SellingPoint
	}
	return ""
}

func (x *Item) GetMinBuy() int32 {
	if x != nil {
		return x.MinBuy
	}
	return 0
}

func (x *Item) GetNostoreSell() bool {
	if x != nil {
		return x.NostoreSell
	}
	return false
}

func (x *Item) GetThumbId() int64 {
	if x != nil {
		return x.ThumbId
	}
	return 0
}

func (x *Item) GetThumbUrl() string {
	if x != nil {
		return x.ThumbUrl
	}
	return ""
}

func (x *Item) GetTemplateId() int32 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *Item) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *Item) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Item) GetOriginPrice() float32 {
	if x != nil {
		return x.OriginPrice
	}
	return 0
}

func (x *Item) GetCostPrice() float32 {
	if x != nil {
		return x.CostPrice
	}
	return 0
}

func (x *Item) GetMinPrice() float32 {
	if x != nil {
		return x.MinPrice
	}
	return 0
}

func (x *Item) GetMaxPrice() float32 {
	if x != nil {
		return x.MaxPrice
	}
	return 0
}

func (x *Item) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Item) GetReviewNum() int32 {
	if x != nil {
		return x.ReviewNum
	}
	return 0
}

func (x *Item) GetViewCount() int32 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

func (x *Item) GetBuyCount() int32 {
	if x != nil {
		return x.BuyCount
	}
	return 0
}

func (x *Item) GetSorting() int32 {
	if x != nil {
		return x.Sorting
	}
	return 0
}

func (x *Item) GetListedAt() string {
	if x != nil {
		return x.ListedAt
	}
	return ""
}

func (x *Item) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Item) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Item) GetBrand() *Brand {
	if x != nil {
		return x.Brand
	}
	return nil
}

func (x *Item) GetCats() []*Cat {
	if x != nil {
		return x.Cats
	}
	return nil
}

func (x *Item) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Item) GetSkus() []*Sku {
	if x != nil {
		return x.Skus
	}
	return nil
}

func (x *Item) GetGalleries() []*ItemGallery {
	if x != nil {
		return x.Galleries
	}
	return nil
}

func (x *Item) GetPrices() []*ItemPrice {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *Item) GetRights() []*ItemRight {
	if x != nil {
		return x.Rights
	}
	return nil
}

func (x *Item) GetSpecIndexes() []*SpecItemIndex {
	if x != nil {
		return x.SpecIndexes
	}
	return nil
}

func (x *Item) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *Item) GetSpecs() []*Spec {
	if x != nil {
		return x.Specs
	}
	return nil
}

func (x *Item) GetSkuitem() *Sku {
	if x != nil {
		return x.Skuitem
	}
	return nil
}

func (x *Item) GetSkuId() int64 {
	if x != nil {
		return x.SkuId
	}
	return 0
}

func (x *Item) GetIsPresale() bool {
	if x != nil {
		return x.IsPresale
	}
	return false
}

func (x *Item) GetItemPresale() *ItemPresale {
	if x != nil {
		return x.ItemPresale
	}
	return nil
}

func (x *Item) GetIsSku() bool {
	if x != nil {
		return x.IsSku
	}
	return false
}

func (x *Item) GetFood() *Food {
	if x != nil {
		return x.Food
	}
	return nil
}

func (x *Item) GetVideoId() int64 {
	if x != nil {
		return x.VideoId
	}
	return 0
}

func (x *Item) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

type GoodsWhere struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemIds []int64 `protobuf:"varint,1,rep,packed,name=item_ids,json=itemIds,proto3" json:"item_ids,omitempty"`
	SkuIds  []int64 `protobuf:"varint,2,rep,packed,name=sku_ids,json=skuIds,proto3" json:"sku_ids,omitempty"`
}

func (x *GoodsWhere) Reset() {
	*x = GoodsWhere{}
	if protoimpl.UnsafeEnabled {
		mi := &file_itemService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsWhere) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsWhere) ProtoMessage() {}

func (x *GoodsWhere) ProtoReflect() protoreflect.Message {
	mi := &file_itemService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsWhere.ProtoReflect.Descriptor instead.
func (*GoodsWhere) Descriptor() ([]byte, []int) {
	return file_itemService_proto_rawDescGZIP(), []int{1}
}

func (x *GoodsWhere) GetItemIds() []int64 {
	if x != nil {
		return x.ItemIds
	}
	return nil
}

func (x *GoodsWhere) GetSkuIds() []int64 {
	if x != nil {
		return x.SkuIds
	}
	return nil
}

type ItemWhere struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paged      int32   `protobuf:"varint,1,opt,name=paged,proto3" json:"paged,omitempty"`
	PageSize   int32   `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Sorting    string  `protobuf:"bytes,3,opt,name=sorting,proto3" json:"sorting,omitempty"`
	Keywords   string  `protobuf:"bytes,4,opt,name=keywords,proto3" json:"keywords,omitempty"`
	Name       string  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	ItemSn     string  `protobuf:"bytes,6,opt,name=item_sn,json=itemSn,proto3" json:"item_sn,omitempty"`
	BrandId    int32   `protobuf:"varint,7,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	TagId      int32   `protobuf:"varint,8,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	CatId      int32   `protobuf:"varint,9,opt,name=cat_id,json=catId,proto3" json:"cat_id,omitempty"`
	TaxonomyId int64   `protobuf:"varint,10,opt,name=taxonomy_id,json=taxonomyId,proto3" json:"taxonomy_id,omitempty"`
	MinPrice   float32 `protobuf:"fixed32,11,opt,name=min_price,json=minPrice,proto3" json:"min_price,omitempty"`
	MaxPrice   float32 `protobuf:"fixed32,12,opt,name=max_price,json=maxPrice,proto3" json:"max_price,omitempty"`
	ModelType  string  `protobuf:"bytes,13,opt,name=model_type,json=modelType,proto3" json:"model_type,omitempty"`
	Status     string  `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	CouponId   int64   `protobuf:"varint,15,opt,name=coupon_id,json=couponId,proto3" json:"coupon_id,omitempty"`
	Valid      bool    `protobuf:"varint,16,opt,name=valid,proto3" json:"valid,omitempty"`  // 是否有效商品
	Invite     string  `protobuf:"bytes,17,opt,name=invite,proto3" json:"invite,omitempty"` // 加密后的邀请码
	Id         int64   `protobuf:"varint,18,opt,name=id,proto3" json:"id,omitempty"`
	Ids        []int64 `protobuf:"varint,19,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	SkuId      int64   `protobuf:"varint,20,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"` //单一规格商品输入参数（在获取规格商品时使用）
	CatSlug    string  `protobuf:"bytes,21,opt,name=cat_slug,json=catSlug,proto3" json:"cat_slug,omitempty"`
	IsSku      bool    `protobuf:"varint,22,opt,name=is_sku,json=isSku,proto3" json:"is_sku,omitempty"`
	KindType   string  `protobuf:"bytes,23,opt,name=kind_type,json=kindType,proto3" json:"kind_type,omitempty"`      // 菜品类型【餐饮商品】: in-堂食菜品,out-外卖菜品
	KindId     int64   `protobuf:"varint,24,opt,name=kind_id,json=kindId,proto3" json:"kind_id,omitempty"`           // 菜单ID【餐饮商品】
	KindIds    []int64 `protobuf:"varint,25,rep,packed,name=kind_ids,json=kindIds,proto3" json:"kind_ids,omitempty"` // 菜单ID集合【餐饮商品】
	Sort       int32   `protobuf:"varint,26,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *ItemWhere) Reset() {
	*x = ItemWhere{}
	if protoimpl.UnsafeEnabled {
		mi := &file_itemService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemWhere) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemWhere) ProtoMessage() {}

func (x *ItemWhere) ProtoReflect() protoreflect.Message {
	mi := &file_itemService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemWhere.ProtoReflect.Descriptor instead.
func (*ItemWhere) Descriptor() ([]byte, []int) {
	return file_itemService_proto_rawDescGZIP(), []int{2}
}

func (x *ItemWhere) GetPaged() int32 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *ItemWhere) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ItemWhere) GetSorting() string {
	if x != nil {
		return x.Sorting
	}
	return ""
}

func (x *ItemWhere) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *ItemWhere) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ItemWhere) GetItemSn() string {
	if x != nil {
		return x.ItemSn
	}
	return ""
}

func (x *ItemWhere) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *ItemWhere) GetTagId() int32 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *ItemWhere) GetCatId() int32 {
	if x != nil {
		return x.CatId
	}
	return 0
}

func (x *ItemWhere) GetTaxonomyId() int64 {
	if x != nil {
		return x.TaxonomyId
	}
	return 0
}

func (x *ItemWhere) GetMinPrice() float32 {
	if x != nil {
		return x.MinPrice
	}
	return 0
}

func (x *ItemWhere) GetMaxPrice() float32 {
	if x != nil {
		return x.MaxPrice
	}
	return 0
}

func (x *ItemWhere) GetModelType() string {
	if x != nil {
		return x.ModelType
	}
	return ""
}

func (x *ItemWhere) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ItemWhere) GetCouponId() int64 {
	if x != nil {
		return x.CouponId
	}
	return 0
}

func (x *ItemWhere) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *ItemWhere) GetInvite() string {
	if x != nil {
		return x.Invite
	}
	return ""
}

func (x *ItemWhere) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItemWhere) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ItemWhere) GetSkuId() int64 {
	if x != nil {
		return x.SkuId
	}
	return 0
}

func (x *ItemWhere) GetCatSlug() string {
	if x != nil {
		return x.CatSlug
	}
	return ""
}

func (x *ItemWhere) GetIsSku() bool {
	if x != nil {
		return x.IsSku
	}
	return false
}

func (x *ItemWhere) GetKindType() string {
	if x != nil {
		return x.KindType
	}
	return ""
}

func (x *ItemWhere) GetKindId() int64 {
	if x != nil {
		return x.KindId
	}
	return 0
}

func (x *ItemWhere) GetKindIds() []int64 {
	if x != nil {
		return x.KindIds
	}
	return nil
}

func (x *ItemWhere) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

type MemberGoods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId         int64   `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	SkuId          int64   `protobuf:"varint,2,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`
	MinMemberPrice float32 `protobuf:"fixed32,3,opt,name=min_member_price,json=minMemberPrice,proto3" json:"min_member_price,omitempty"`
	MaxMemberPrice float32 `protobuf:"fixed32,4,opt,name=max_member_price,json=maxMemberPrice,proto3" json:"max_member_price,omitempty"`
	Discount       float32 `protobuf:"fixed32,5,opt,name=discount,proto3" json:"discount,omitempty"`
}

func (x *MemberGoods) Reset() {
	*x = MemberGoods{}
	if protoimpl.UnsafeEnabled {
		mi := &file_itemService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberGoods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberGoods) ProtoMessage() {}

func (x *MemberGoods) ProtoReflect() protoreflect.Message {
	mi := &file_itemService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberGoods.ProtoReflect.Descriptor instead.
func (*MemberGoods) Descriptor() ([]byte, []int) {
	return file_itemService_proto_rawDescGZIP(), []int{3}
}

func (x *MemberGoods) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *MemberGoods) GetSkuId() int64 {
	if x != nil {
		return x.SkuId
	}
	return 0
}

func (x *MemberGoods) GetMinMemberPrice() float32 {
	if x != nil {
		return x.MinMemberPrice
	}
	return 0
}

func (x *MemberGoods) GetMaxMemberPrice() float32 {
	if x != nil {
		return x.MaxMemberPrice
	}
	return 0
}

func (x *MemberGoods) GetDiscount() float32 {
	if x != nil {
		return x.Discount
	}
	return 0
}

type ItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity *Item         `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Pager  *common.Pager `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager,omitempty"`
	Items  []*Item       `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	Error  *common.Error `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Info   *common.Info  `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *ItemResponse) Reset() {
	*x = ItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_itemService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemResponse) ProtoMessage() {}

func (x *ItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_itemService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemResponse.ProtoReflect.Descriptor instead.
func (*ItemResponse) Descriptor() ([]byte, []int) {
	return file_itemService_proto_rawDescGZIP(), []int{4}
}

func (x *ItemResponse) GetEntity() *Item {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *ItemResponse) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *ItemResponse) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ItemResponse) GetError() *common.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ItemResponse) GetInfo() *common.Info {
	if x != nil {
		return x.Info
	}
	return nil
}

type ItemDisplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Unit                  string         `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	ItemSn                string         `protobuf:"bytes,4,opt,name=item_sn,json=itemSn,proto3" json:"item_sn,omitempty"`
	TaxonomyId            int64          `protobuf:"varint,5,opt,name=taxonomy_id,json=taxonomyId,proto3" json:"taxonomy_id,omitempty"`
	Quantity              int32          `protobuf:"varint,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
	SoldNum               int32          `protobuf:"varint,7,opt,name=sold_num,json=soldNum,proto3" json:"sold_num,omitempty"`
	ModelType             string         `protobuf:"bytes,8,opt,name=model_type,json=modelType,proto3" json:"model_type,omitempty"`
	HideStock             bool           `protobuf:"varint,9,opt,name=hide_stock,json=hideStock,proto3" json:"hide_stock,omitempty"`
	Content               string         `protobuf:"bytes,10,opt,name=content,proto3" json:"content,omitempty"`
	Summary               string         `protobuf:"bytes,11,opt,name=summary,proto3" json:"summary,omitempty"`
	SellingPoint          string         `protobuf:"bytes,12,opt,name=selling_point,json=sellingPoint,proto3" json:"selling_point,omitempty"`
	MinBuy                int32          `protobuf:"varint,13,opt,name=min_buy,json=minBuy,proto3" json:"min_buy,omitempty"`
	NostoreSell           bool           `protobuf:"varint,14,opt,name=nostore_sell,json=nostoreSell,proto3" json:"nostore_sell,omitempty"`
	ThumbUrl              string         `protobuf:"bytes,15,opt,name=thumb_url,json=thumbUrl,proto3" json:"thumb_url,omitempty"`
	TemplateId            int32          `protobuf:"varint,16,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	Barcode               string         `protobuf:"bytes,17,opt,name=barcode,proto3" json:"barcode,omitempty"`
	Price                 float32        `protobuf:"fixed32,18,opt,name=price,proto3" json:"price,omitempty"`
	OriginPrice           float32        `protobuf:"fixed32,19,opt,name=origin_price,json=originPrice,proto3" json:"origin_price,omitempty"`
	MinPrice              float32        `protobuf:"fixed32,20,opt,name=min_price,json=minPrice,proto3" json:"min_price,omitempty"`
	MaxPrice              float32        `protobuf:"fixed32,21,opt,name=max_price,json=maxPrice,proto3" json:"max_price,omitempty"`
	Weight                float32        `protobuf:"fixed32,22,opt,name=weight,proto3" json:"weight,omitempty"`
	ReviewNum             int32          `protobuf:"varint,23,opt,name=review_num,json=reviewNum,proto3" json:"review_num,omitempty"`
	ViewCount             int32          `protobuf:"varint,24,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
	Brand                 *Brand         `protobuf:"bytes,25,opt,name=brand,proto3" json:"brand,omitempty"`
	Cats                  []*Cat         `protobuf:"bytes,26,rep,name=cats,proto3" json:"cats,omitempty"`
	Tags                  []*Tag         `protobuf:"bytes,27,rep,name=tags,proto3" json:"tags,omitempty"`
	Skus                  []*Sku         `protobuf:"bytes,28,rep,name=skus,proto3" json:"skus,omitempty"`
	Galleries             []*ItemGallery `protobuf:"bytes,29,rep,name=galleries,proto3" json:"galleries,omitempty"`
	Specs                 []*Spec        `protobuf:"bytes,30,rep,name=specs,proto3" json:"specs,omitempty"`                                                                //(详情显示专用)
	IsMemberGoods         bool           `protobuf:"varint,31,opt,name=is_member_goods,json=isMemberGoods,proto3" json:"is_member_goods,omitempty"`                        // 是否会员专享
	IsBuy                 bool           `protobuf:"varint,32,opt,name=is_buy,json=isBuy,proto3" json:"is_buy,omitempty"`                                                  // 商品是否可购买
	IsMember              bool           `protobuf:"varint,33,opt,name=is_member,json=isMember,proto3" json:"is_member,omitempty"`                                         // 登录用户是否会员
	MemberPrice           float32        `protobuf:"fixed32,34,opt,name=member_price,json=memberPrice,proto3" json:"member_price,omitempty"`                               // 会员价
	IsDistribution        bool           `protobuf:"varint,35,opt,name=is_distribution,json=isDistribution,proto3" json:"is_distribution,omitempty"`                       // 是否参与分销
	DistributionShareIcon string         `protobuf:"bytes,36,opt,name=distribution_share_icon,json=distributionShareIcon,proto3" json:"distribution_share_icon,omitempty"` // 分销图标
	Listed                bool           `protobuf:"varint,37,opt,name=listed,proto3" json:"listed,omitempty"`
	IsSku                 bool           `protobuf:"varint,38,opt,name=is_sku,json=isSku,proto3" json:"is_sku,omitempty"` // 是否多规格商品
	Food                  *Food          `protobuf:"bytes,39,opt,name=food,proto3" json:"food,omitempty"`                 // 餐饮商品附加信息
	BuyQuota              int32          `protobuf:"varint,40,opt,name=buy_quota,json=buyQuota,proto3" json:"buy_quota,omitempty"`
	VideoId               int64          `protobuf:"varint,41,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	VideoUrl              string         `protobuf:"bytes,42,opt,name=video_url,json=videoUrl,proto3" json:"video_url,omitempty"`
}

func (x *ItemDisplay) Reset() {
	*x = ItemDisplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_itemService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemDisplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemDisplay) ProtoMessage() {}

func (x *ItemDisplay) ProtoReflect() protoreflect.Message {
	mi := &file_itemService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemDisplay.ProtoReflect.Descriptor instead.
func (*ItemDisplay) Descriptor() ([]byte, []int) {
	return file_itemService_proto_rawDescGZIP(), []int{5}
}

func (x *ItemDisplay) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItemDisplay) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ItemDisplay) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *ItemDisplay) GetItemSn() string {
	if x != nil {
		return x.ItemSn
	}
	return ""
}

func (x *ItemDisplay) GetTaxonomyId() int64 {
	if x != nil {
		return x.TaxonomyId
	}
	return 0
}

func (x *ItemDisplay) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *ItemDisplay) GetSoldNum() int32 {
	if x != nil {
		return x.SoldNum
	}
	return 0
}

func (x *ItemDisplay) GetModelType() string {
	if x != nil {
		return x.ModelType
	}
	return ""
}

func (x *ItemDisplay) GetHideStock() bool {
	if x != nil {
		return x.HideStock
	}
	return false
}

func (x *ItemDisplay) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ItemDisplay) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *ItemDisplay) GetSellingPoint() string {
	if x != nil {
		return x.SellingPoint
	}
	return ""
}

func (x *ItemDisplay) GetMinBuy() int32 {
	if x != nil {
		return x.MinBuy
	}
	return 0
}

func (x *ItemDisplay) GetNostoreSell() bool {
	if x != nil {
		return x.NostoreSell
	}
	return false
}

func (x *ItemDisplay) GetThumbUrl() string {
	if x != nil {
		return x.ThumbUrl
	}
	return ""
}

func (x *ItemDisplay) GetTemplateId() int32 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *ItemDisplay) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *ItemDisplay) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ItemDisplay) GetOriginPrice() float32 {
	if x != nil {
		return x.OriginPrice
	}
	return 0
}

func (x *ItemDisplay) GetMinPrice() float32 {
	if x != nil {
		return x.MinPrice
	}
	return 0
}

func (x *ItemDisplay) GetMaxPrice() float32 {
	if x != nil {
		return x.MaxPrice
	}
	return 0
}

func (x *ItemDisplay) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ItemDisplay) GetReviewNum() int32 {
	if x != nil {
		return x.ReviewNum
	}
	return 0
}

func (x *ItemDisplay) GetViewCount() int32 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

func (x *ItemDisplay) GetBrand() *Brand {
	if x != nil {
		return x.Brand
	}
	return nil
}

func (x *ItemDisplay) GetCats() []*Cat {
	if x != nil {
		return x.Cats
	}
	return nil
}

func (x *ItemDisplay) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ItemDisplay) GetSkus() []*Sku {
	if x != nil {
		return x.Skus
	}
	return nil
}

func (x *ItemDisplay) GetGalleries() []*ItemGallery {
	if x != nil {
		return x.Galleries
	}
	return nil
}

func (x *ItemDisplay) GetSpecs() []*Spec {
	if x != nil {
		return x.Specs
	}
	return nil
}

func (x *ItemDisplay) GetIsMemberGoods() bool {
	if x != nil {
		return x.IsMemberGoods
	}
	return false
}

func (x *ItemDisplay) GetIsBuy() bool {
	if x != nil {
		return x.IsBuy
	}
	return false
}

func (x *ItemDisplay) GetIsMember() bool {
	if x != nil {
		return x.IsMember
	}
	return false
}

func (x *ItemDisplay) GetMemberPrice() float32 {
	if x != nil {
		return x.MemberPrice
	}
	return 0
}

func (x *ItemDisplay) GetIsDistribution() bool {
	if x != nil {
		return x.IsDistribution
	}
	return false
}

func (x *ItemDisplay) GetDistributionShareIcon() string {
	if x != nil {
		return x.DistributionShareIcon
	}
	return ""
}

func (x *ItemDisplay) GetListed() bool {
	if x != nil {
		return x.Listed
	}
	return false
}

func (x *ItemDisplay) GetIsSku() bool {
	if x != nil {
		return x.IsSku
	}
	return false
}

func (x *ItemDisplay) GetFood() *Food {
	if x != nil {
		return x.Food
	}
	return nil
}

func (x *ItemDisplay) GetBuyQuota() int32 {
	if x != nil {
		return x.BuyQuota
	}
	return 0
}

func (x *ItemDisplay) GetVideoId() int64 {
	if x != nil {
		return x.VideoId
	}
	return 0
}

func (x *ItemDisplay) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

type ItemDisplayWhere struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ids     []int64 `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	SoldNum int32   `protobuf:"varint,3,opt,name=sold_num,json=soldNum,proto3" json:"sold_num,omitempty"`
	SkuId   int64   `protobuf:"varint,4,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`
}

func (x *ItemDisplayWhere) Reset() {
	*x = ItemDisplayWhere{}
	if protoimpl.UnsafeEnabled {
		mi := &file_itemService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemDisplayWhere) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemDisplayWhere) ProtoMessage() {}

func (x *ItemDisplayWhere) ProtoReflect() protoreflect.Message {
	mi := &file_itemService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemDisplayWhere.ProtoReflect.Descriptor instead.
func (*ItemDisplayWhere) Descriptor() ([]byte, []int) {
	return file_itemService_proto_rawDescGZIP(), []int{6}
}

func (x *ItemDisplayWhere) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItemDisplayWhere) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ItemDisplayWhere) GetSoldNum() int32 {
	if x != nil {
		return x.SoldNum
	}
	return 0
}

func (x *ItemDisplayWhere) GetSkuId() int64 {
	if x != nil {
		return x.SkuId
	}
	return 0
}

type ItemDisplayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity *ItemDisplay   `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Pager  *common.Pager  `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager,omitempty"`
	Items  []*ItemDisplay `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	Error  *common.Error  `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Info   *common.Info   `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *ItemDisplayResponse) Reset() {
	*x = ItemDisplayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_itemService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemDisplayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemDisplayResponse) ProtoMessage() {}

func (x *ItemDisplayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_itemService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemDisplayResponse.ProtoReflect.Descriptor instead.
func (*ItemDisplayResponse) Descriptor() ([]byte, []int) {
	return file_itemService_proto_rawDescGZIP(), []int{7}
}

func (x *ItemDisplayResponse) GetEntity() *ItemDisplay {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *ItemDisplayResponse) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *ItemDisplayResponse) GetItems() []*ItemDisplay {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ItemDisplayResponse) GetError() *common.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ItemDisplayResponse) GetInfo() *common.Info {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_itemService_proto protoreflect.FileDescriptor

var file_itemService_proto_rawDesc = []byte{
	0x0a, 0x11, 0x69, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x11, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x18, 0x69, 0x74, 0x65, 0x6d, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x69, 0x74, 0x65, 0x6d,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x74, 0x61, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x10, 0x73, 0x6b, 0x75, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x10, 0x63, 0x61, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x73, 0x70, 0x65, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x65,
	0x73, 0x61, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x66, 0x6f, 0x6f, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x0e, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x53, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x78,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75,
	0x79, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62,
	0x75, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6f, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x53, 0x6f, 0x6c, 0x64, 0x4e,
	0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x69, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x12, 0x2e, 0x0a, 0x13, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6a,
	0x6f, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x6e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d,
	0x69, 0x6e, 0x42, 0x75, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x6f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x04,
	0x63, 0x61, 0x74, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x52, 0x04, 0x63, 0x61, 0x74, 0x73, 0x12,
	0x21, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x6b, 0x75, 0x73, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x52,
	0x04, 0x73, 0x6b, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x52,
	0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x73, 0x18, 0x30, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x31, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x32, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x73, 0x6b, 0x75, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x52, 0x07, 0x73, 0x6b, 0x75, 0x69, 0x74, 0x65,
	0x6d, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x50, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x70, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x65,
	0x73, 0x61, 0x6c, 0x65, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x61, 0x6c,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x73, 0x6b, 0x75, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x69, 0x73, 0x53, 0x6b, 0x75, 0x12, 0x22, 0x0a, 0x04, 0x66, 0x6f, 0x6f, 0x64,
	0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x46, 0x6f, 0x6f, 0x64, 0x52, 0x04, 0x66, 0x6f, 0x6f, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x55, 0x72, 0x6c, 0x22, 0x40, 0x0a, 0x0a, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x57, 0x68, 0x65,
	0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06,
	0x73, 0x6b, 0x75, 0x49, 0x64, 0x73, 0x22, 0x97, 0x05, 0x0a, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x57,
	0x68, 0x65, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x53, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x63, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x61,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x74,
	0x53, 0x6c, 0x75, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x73, 0x6b, 0x75, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x53, 0x6b, 0x75, 0x12, 0x1b, 0x0a, 0x09, 0x6b,
	0x69, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6b, 0x69, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6b, 0x69, 0x6e, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6b, 0x69, 0x6e, 0x64, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x69, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x19, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x07, 0x6b, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x22, 0xad, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6b, 0x75,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61,
	0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xc8, 0x01, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x61, 0x67,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x9d, 0x0a, 0x0a, 0x0b,
	0x49, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x53, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6f, 0x6c,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6f, 0x6c,
	0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x69, 0x64, 0x65, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d,
	0x69, 0x6e, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69,
	0x6e, 0x42, 0x75, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x73, 0x65, 0x6c, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x6f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x6e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76,
	0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12,
	0x21, 0x0a, 0x04, 0x63, 0x61, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x52, 0x04, 0x63, 0x61,
	0x74, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x6b, 0x75, 0x73, 0x18, 0x1c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x6b, 0x75, 0x52, 0x04, 0x73, 0x6b, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x67, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x47, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x73, 0x70,
	0x65, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x69,
	0x73, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x42,
	0x75, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49,
	0x63, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69,
	0x73, 0x5f, 0x73, 0x6b, 0x75, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x53,
	0x6b, 0x75, 0x12, 0x22, 0x0a, 0x04, 0x66, 0x6f, 0x6f, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x6f, 0x6f, 0x64,
	0x52, 0x04, 0x66, 0x6f, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x79, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x22, 0x66, 0x0a, 0x10, 0x49,
	0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x57, 0x68, 0x65, 0x72, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6f, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x15, 0x0a, 0x06,
	0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x6b,
	0x75, 0x49, 0x64, 0x22, 0xdd, 0x01, 0x0a, 0x13, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x61,
	0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x12,
	0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x20, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x32, 0x8f, 0x08, 0x0a, 0x0b, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x16, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x06, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x30, 0x0a, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x32, 0x0a, 0x06, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x16, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x09, 0x44, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x34, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x0e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x16, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x12, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x03,
	0x47, 0x65, 0x74, 0x12, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a,
	0x09, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x57, 0x68, 0x65, 0x72, 0x65,
	0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x06, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x33,
	0x0a, 0x07, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x09, 0x53, 0x6b, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x06,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x57, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x16, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x57, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x16, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x79, 0x49, 0x64, 0x73, 0x12, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35,
	0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x57, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x16, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xd7, 0x01, 0x0a, 0x0d, 0x4d, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x57, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x13,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x57, 0x68,
	0x65, 0x72, 0x65, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x6c, 0x64, 0x4e,
	0x75, 0x6d, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x57, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x1d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_itemService_proto_rawDescOnce sync.Once
	file_itemService_proto_rawDescData = file_itemService_proto_rawDesc
)

func file_itemService_proto_rawDescGZIP() []byte {
	file_itemService_proto_rawDescOnce.Do(func() {
		file_itemService_proto_rawDescData = protoimpl.X.CompressGZIP(file_itemService_proto_rawDescData)
	})
	return file_itemService_proto_rawDescData
}

var file_itemService_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_itemService_proto_goTypes = []interface{}{
	(*Item)(nil),                // 0: services.Item
	(*GoodsWhere)(nil),          // 1: services.GoodsWhere
	(*ItemWhere)(nil),           // 2: services.ItemWhere
	(*MemberGoods)(nil),         // 3: services.MemberGoods
	(*ItemResponse)(nil),        // 4: services.ItemResponse
	(*ItemDisplay)(nil),         // 5: services.ItemDisplay
	(*ItemDisplayWhere)(nil),    // 6: services.ItemDisplayWhere
	(*ItemDisplayResponse)(nil), // 7: services.ItemDisplayResponse
	(*Brand)(nil),               // 8: services.Brand
	(*Cat)(nil),                 // 9: services.Cat
	(*Tag)(nil),                 // 10: services.Tag
	(*Sku)(nil),                 // 11: services.Sku
	(*ItemGallery)(nil),         // 12: services.ItemGallery
	(*ItemPrice)(nil),           // 13: services.ItemPrice
	(*ItemRight)(nil),           // 14: services.ItemRight
	(*SpecItemIndex)(nil),       // 15: services.SpecItemIndex
	(*Spec)(nil),                // 16: services.Spec
	(*ItemPresale)(nil),         // 17: services.ItemPresale
	(*Food)(nil),                // 18: services.Food
	(*common.Pager)(nil),        // 19: common.Pager
	(*common.Error)(nil),        // 20: common.Error
	(*common.Info)(nil),         // 21: common.Info
}
var file_itemService_proto_depIdxs = []int32{
	8,  // 0: services.Item.brand:type_name -> services.Brand
	9,  // 1: services.Item.cats:type_name -> services.Cat
	10, // 2: services.Item.tags:type_name -> services.Tag
	11, // 3: services.Item.skus:type_name -> services.Sku
	12, // 4: services.Item.galleries:type_name -> services.ItemGallery
	13, // 5: services.Item.prices:type_name -> services.ItemPrice
	14, // 6: services.Item.rights:type_name -> services.ItemRight
	15, // 7: services.Item.spec_indexes:type_name -> services.SpecItemIndex
	16, // 8: services.Item.specs:type_name -> services.Spec
	11, // 9: services.Item.skuitem:type_name -> services.Sku
	17, // 10: services.Item.item_presale:type_name -> services.ItemPresale
	18, // 11: services.Item.food:type_name -> services.Food
	0,  // 12: services.ItemResponse.entity:type_name -> services.Item
	19, // 13: services.ItemResponse.pager:type_name -> common.Pager
	0,  // 14: services.ItemResponse.items:type_name -> services.Item
	20, // 15: services.ItemResponse.error:type_name -> common.Error
	21, // 16: services.ItemResponse.info:type_name -> common.Info
	8,  // 17: services.ItemDisplay.brand:type_name -> services.Brand
	9,  // 18: services.ItemDisplay.cats:type_name -> services.Cat
	10, // 19: services.ItemDisplay.tags:type_name -> services.Tag
	11, // 20: services.ItemDisplay.skus:type_name -> services.Sku
	12, // 21: services.ItemDisplay.galleries:type_name -> services.ItemGallery
	16, // 22: services.ItemDisplay.specs:type_name -> services.Spec
	18, // 23: services.ItemDisplay.food:type_name -> services.Food
	5,  // 24: services.ItemDisplayResponse.entity:type_name -> services.ItemDisplay
	19, // 25: services.ItemDisplayResponse.pager:type_name -> common.Pager
	5,  // 26: services.ItemDisplayResponse.items:type_name -> services.ItemDisplay
	20, // 27: services.ItemDisplayResponse.error:type_name -> common.Error
	21, // 28: services.ItemDisplayResponse.info:type_name -> common.Info
	0,  // 29: services.ItemService.Create:input_type -> services.Item
	0,  // 30: services.ItemService.Update:input_type -> services.Item
	0,  // 31: services.ItemService.Delete:input_type -> services.Item
	0,  // 32: services.ItemService.Lock:input_type -> services.Item
	0,  // 33: services.ItemService.Unlock:input_type -> services.Item
	0,  // 34: services.ItemService.Listing:input_type -> services.Item
	0,  // 35: services.ItemService.Delisting:input_type -> services.Item
	0,  // 36: services.ItemService.Recovery:input_type -> services.Item
	0,  // 37: services.ItemService.Destroy:input_type -> services.Item
	0,  // 38: services.ItemService.Get:input_type -> services.Item
	1,  // 39: services.ItemService.GoodsList:input_type -> services.GoodsWhere
	0,  // 40: services.ItemService.Detail:input_type -> services.Item
	0,  // 41: services.ItemService.Display:input_type -> services.Item
	0,  // 42: services.ItemService.SkuDetail:input_type -> services.Item
	0,  // 43: services.ItemService.List:input_type -> services.Item
	2,  // 44: services.ItemService.Search:input_type -> services.ItemWhere
	2,  // 45: services.ItemService.SearchDeleted:input_type -> services.ItemWhere
	0,  // 46: services.ItemService.DeleteByIds:input_type -> services.Item
	2,  // 47: services.ItemService.Sort:input_type -> services.ItemWhere
	2,  // 48: services.MyItemService.Search:input_type -> services.ItemWhere
	2,  // 49: services.MyItemService.Get:input_type -> services.ItemWhere
	6,  // 50: services.MyItemService.AddSoldNum:input_type -> services.ItemDisplayWhere
	4,  // 51: services.ItemService.Create:output_type -> services.ItemResponse
	4,  // 52: services.ItemService.Update:output_type -> services.ItemResponse
	4,  // 53: services.ItemService.Delete:output_type -> services.ItemResponse
	4,  // 54: services.ItemService.Lock:output_type -> services.ItemResponse
	4,  // 55: services.ItemService.Unlock:output_type -> services.ItemResponse
	4,  // 56: services.ItemService.Listing:output_type -> services.ItemResponse
	4,  // 57: services.ItemService.Delisting:output_type -> services.ItemResponse
	4,  // 58: services.ItemService.Recovery:output_type -> services.ItemResponse
	4,  // 59: services.ItemService.Destroy:output_type -> services.ItemResponse
	4,  // 60: services.ItemService.Get:output_type -> services.ItemResponse
	4,  // 61: services.ItemService.GoodsList:output_type -> services.ItemResponse
	4,  // 62: services.ItemService.Detail:output_type -> services.ItemResponse
	4,  // 63: services.ItemService.Display:output_type -> services.ItemResponse
	4,  // 64: services.ItemService.SkuDetail:output_type -> services.ItemResponse
	4,  // 65: services.ItemService.List:output_type -> services.ItemResponse
	4,  // 66: services.ItemService.Search:output_type -> services.ItemResponse
	4,  // 67: services.ItemService.SearchDeleted:output_type -> services.ItemResponse
	4,  // 68: services.ItemService.DeleteByIds:output_type -> services.ItemResponse
	4,  // 69: services.ItemService.Sort:output_type -> services.ItemResponse
	7,  // 70: services.MyItemService.Search:output_type -> services.ItemDisplayResponse
	7,  // 71: services.MyItemService.Get:output_type -> services.ItemDisplayResponse
	7,  // 72: services.MyItemService.AddSoldNum:output_type -> services.ItemDisplayResponse
	51, // [51:73] is the sub-list for method output_type
	29, // [29:51] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_itemService_proto_init() }
func file_itemService_proto_init() {
	if File_itemService_proto != nil {
		return
	}
	file_itemGalleryService_proto_init()
	file_itemPriceService_proto_init()
	file_itemRightService_proto_init()
	file_tagService_proto_init()
	file_brandService_proto_init()
	file_skuService_proto_init()
	file_catService_proto_init()
	file_specService_proto_init()
	file_itemPresaleService_proto_init()
	file_foodService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_itemService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_itemService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsWhere); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_itemService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemWhere); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_itemService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberGoods); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_itemService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_itemService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemDisplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_itemService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemDisplayWhere); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_itemService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemDisplayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_itemService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_itemService_proto_goTypes,
		DependencyIndexes: file_itemService_proto_depIdxs,
		MessageInfos:      file_itemService_proto_msgTypes,
	}.Build()
	File_itemService_proto = out.File
	file_itemService_proto_rawDesc = nil
	file_itemService_proto_goTypes = nil
	file_itemService_proto_depIdxs = nil
}
