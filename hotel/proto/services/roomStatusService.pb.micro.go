// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: roomStatusService.proto

package services

import (
	_ "github.com/geiqin/microkit/protobuf/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RoomStatusService service

func NewRoomStatusServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RoomStatusService service

type RoomStatusService interface {
	Save(ctx context.Context, in *RoomStatus, opts ...client.CallOption) (*RoomStatusResponse, error)
}

type roomStatusService struct {
	c    client.Client
	name string
}

func NewRoomStatusService(name string, c client.Client) RoomStatusService {
	return &roomStatusService{
		c:    c,
		name: name,
	}
}

func (c *roomStatusService) Save(ctx context.Context, in *RoomStatus, opts ...client.CallOption) (*RoomStatusResponse, error) {
	req := c.c.NewRequest(c.name, "RoomStatusService.Save", in)
	out := new(RoomStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoomStatusService service

type RoomStatusServiceHandler interface {
	Save(context.Context, *RoomStatus, *RoomStatusResponse) error
}

func RegisterRoomStatusServiceHandler(s server.Server, hdlr RoomStatusServiceHandler, opts ...server.HandlerOption) error {
	type roomStatusService interface {
		Save(ctx context.Context, in *RoomStatus, out *RoomStatusResponse) error
	}
	type RoomStatusService struct {
		roomStatusService
	}
	h := &roomStatusServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RoomStatusService{h}, opts...))
}

type roomStatusServiceHandler struct {
	RoomStatusServiceHandler
}

func (h *roomStatusServiceHandler) Save(ctx context.Context, in *RoomStatus, out *RoomStatusResponse) error {
	return h.RoomStatusServiceHandler.Save(ctx, in, out)
}
