// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: roomkeepService.proto

package services

import (
	_ "github.com/geiqin/microkit/protobuf/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RoomKeepService service

func NewRoomKeepServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RoomKeepService service

type RoomKeepService interface {
	Save(ctx context.Context, in *RoomKeep, opts ...client.CallOption) (*RoomKeepResponse, error)
	BatchSave(ctx context.Context, in *RoomKeep, opts ...client.CallOption) (*RoomKeepResponse, error)
	Cancel(ctx context.Context, in *RoomKeepWhere, opts ...client.CallOption) (*RoomKeepResponse, error)
}

type roomKeepService struct {
	c    client.Client
	name string
}

func NewRoomKeepService(name string, c client.Client) RoomKeepService {
	return &roomKeepService{
		c:    c,
		name: name,
	}
}

func (c *roomKeepService) Save(ctx context.Context, in *RoomKeep, opts ...client.CallOption) (*RoomKeepResponse, error) {
	req := c.c.NewRequest(c.name, "RoomKeepService.Save", in)
	out := new(RoomKeepResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomKeepService) BatchSave(ctx context.Context, in *RoomKeep, opts ...client.CallOption) (*RoomKeepResponse, error) {
	req := c.c.NewRequest(c.name, "RoomKeepService.BatchSave", in)
	out := new(RoomKeepResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomKeepService) Cancel(ctx context.Context, in *RoomKeepWhere, opts ...client.CallOption) (*RoomKeepResponse, error) {
	req := c.c.NewRequest(c.name, "RoomKeepService.Cancel", in)
	out := new(RoomKeepResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoomKeepService service

type RoomKeepServiceHandler interface {
	Save(context.Context, *RoomKeep, *RoomKeepResponse) error
	BatchSave(context.Context, *RoomKeep, *RoomKeepResponse) error
	Cancel(context.Context, *RoomKeepWhere, *RoomKeepResponse) error
}

func RegisterRoomKeepServiceHandler(s server.Server, hdlr RoomKeepServiceHandler, opts ...server.HandlerOption) error {
	type roomKeepService interface {
		Save(ctx context.Context, in *RoomKeep, out *RoomKeepResponse) error
		BatchSave(ctx context.Context, in *RoomKeep, out *RoomKeepResponse) error
		Cancel(ctx context.Context, in *RoomKeepWhere, out *RoomKeepResponse) error
	}
	type RoomKeepService struct {
		roomKeepService
	}
	h := &roomKeepServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RoomKeepService{h}, opts...))
}

type roomKeepServiceHandler struct {
	RoomKeepServiceHandler
}

func (h *roomKeepServiceHandler) Save(ctx context.Context, in *RoomKeep, out *RoomKeepResponse) error {
	return h.RoomKeepServiceHandler.Save(ctx, in, out)
}

func (h *roomKeepServiceHandler) BatchSave(ctx context.Context, in *RoomKeep, out *RoomKeepResponse) error {
	return h.RoomKeepServiceHandler.BatchSave(ctx, in, out)
}

func (h *roomKeepServiceHandler) Cancel(ctx context.Context, in *RoomKeepWhere, out *RoomKeepResponse) error {
	return h.RoomKeepServiceHandler.Cancel(ctx, in, out)
}
