// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: marketChannelService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/microkit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MarketChannelService service

func NewMarketChannelServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MarketChannelService service

type MarketChannelService interface {
	Create(ctx context.Context, in *MarketChannel, opts ...client.CallOption) (*MarketChannelResponse, error)
	Update(ctx context.Context, in *MarketChannel, opts ...client.CallOption) (*MarketChannelResponse, error)
	Search(ctx context.Context, in *MarketChannelWhere, opts ...client.CallOption) (*MarketChannelResponse, error)
	List(ctx context.Context, in *MarketChannelWhere, opts ...client.CallOption) (*MarketChannelResponse, error)
	SetSorting(ctx context.Context, in *MarketChannel, opts ...client.CallOption) (*MarketChannelResponse, error)
	SetStatus(ctx context.Context, in *MarketChannel, opts ...client.CallOption) (*MarketChannelResponse, error)
	Delete(ctx context.Context, in *MarketChannelWhere, opts ...client.CallOption) (*MarketChannelResponse, error)
}

type marketChannelService struct {
	c    client.Client
	name string
}

func NewMarketChannelService(name string, c client.Client) MarketChannelService {
	return &marketChannelService{
		c:    c,
		name: name,
	}
}

func (c *marketChannelService) Create(ctx context.Context, in *MarketChannel, opts ...client.CallOption) (*MarketChannelResponse, error) {
	req := c.c.NewRequest(c.name, "MarketChannelService.Create", in)
	out := new(MarketChannelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketChannelService) Update(ctx context.Context, in *MarketChannel, opts ...client.CallOption) (*MarketChannelResponse, error) {
	req := c.c.NewRequest(c.name, "MarketChannelService.Update", in)
	out := new(MarketChannelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketChannelService) Search(ctx context.Context, in *MarketChannelWhere, opts ...client.CallOption) (*MarketChannelResponse, error) {
	req := c.c.NewRequest(c.name, "MarketChannelService.Search", in)
	out := new(MarketChannelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketChannelService) List(ctx context.Context, in *MarketChannelWhere, opts ...client.CallOption) (*MarketChannelResponse, error) {
	req := c.c.NewRequest(c.name, "MarketChannelService.List", in)
	out := new(MarketChannelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketChannelService) SetSorting(ctx context.Context, in *MarketChannel, opts ...client.CallOption) (*MarketChannelResponse, error) {
	req := c.c.NewRequest(c.name, "MarketChannelService.SetSorting", in)
	out := new(MarketChannelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketChannelService) SetStatus(ctx context.Context, in *MarketChannel, opts ...client.CallOption) (*MarketChannelResponse, error) {
	req := c.c.NewRequest(c.name, "MarketChannelService.SetStatus", in)
	out := new(MarketChannelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketChannelService) Delete(ctx context.Context, in *MarketChannelWhere, opts ...client.CallOption) (*MarketChannelResponse, error) {
	req := c.c.NewRequest(c.name, "MarketChannelService.Delete", in)
	out := new(MarketChannelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MarketChannelService service

type MarketChannelServiceHandler interface {
	Create(context.Context, *MarketChannel, *MarketChannelResponse) error
	Update(context.Context, *MarketChannel, *MarketChannelResponse) error
	Search(context.Context, *MarketChannelWhere, *MarketChannelResponse) error
	List(context.Context, *MarketChannelWhere, *MarketChannelResponse) error
	SetSorting(context.Context, *MarketChannel, *MarketChannelResponse) error
	SetStatus(context.Context, *MarketChannel, *MarketChannelResponse) error
	Delete(context.Context, *MarketChannelWhere, *MarketChannelResponse) error
}

func RegisterMarketChannelServiceHandler(s server.Server, hdlr MarketChannelServiceHandler, opts ...server.HandlerOption) error {
	type marketChannelService interface {
		Create(ctx context.Context, in *MarketChannel, out *MarketChannelResponse) error
		Update(ctx context.Context, in *MarketChannel, out *MarketChannelResponse) error
		Search(ctx context.Context, in *MarketChannelWhere, out *MarketChannelResponse) error
		List(ctx context.Context, in *MarketChannelWhere, out *MarketChannelResponse) error
		SetSorting(ctx context.Context, in *MarketChannel, out *MarketChannelResponse) error
		SetStatus(ctx context.Context, in *MarketChannel, out *MarketChannelResponse) error
		Delete(ctx context.Context, in *MarketChannelWhere, out *MarketChannelResponse) error
	}
	type MarketChannelService struct {
		marketChannelService
	}
	h := &marketChannelServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MarketChannelService{h}, opts...))
}

type marketChannelServiceHandler struct {
	MarketChannelServiceHandler
}

func (h *marketChannelServiceHandler) Create(ctx context.Context, in *MarketChannel, out *MarketChannelResponse) error {
	return h.MarketChannelServiceHandler.Create(ctx, in, out)
}

func (h *marketChannelServiceHandler) Update(ctx context.Context, in *MarketChannel, out *MarketChannelResponse) error {
	return h.MarketChannelServiceHandler.Update(ctx, in, out)
}

func (h *marketChannelServiceHandler) Search(ctx context.Context, in *MarketChannelWhere, out *MarketChannelResponse) error {
	return h.MarketChannelServiceHandler.Search(ctx, in, out)
}

func (h *marketChannelServiceHandler) List(ctx context.Context, in *MarketChannelWhere, out *MarketChannelResponse) error {
	return h.MarketChannelServiceHandler.List(ctx, in, out)
}

func (h *marketChannelServiceHandler) SetSorting(ctx context.Context, in *MarketChannel, out *MarketChannelResponse) error {
	return h.MarketChannelServiceHandler.SetSorting(ctx, in, out)
}

func (h *marketChannelServiceHandler) SetStatus(ctx context.Context, in *MarketChannel, out *MarketChannelResponse) error {
	return h.MarketChannelServiceHandler.SetStatus(ctx, in, out)
}

func (h *marketChannelServiceHandler) Delete(ctx context.Context, in *MarketChannelWhere, out *MarketChannelResponse) error {
	return h.MarketChannelServiceHandler.Delete(ctx, in, out)
}
