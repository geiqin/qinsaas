// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: customerChannelService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/microkit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CustomerChannelService service

func NewCustomerChannelServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CustomerChannelService service

type CustomerChannelService interface {
	Create(ctx context.Context, in *CustomerChannel, opts ...client.CallOption) (*CustomerChannelResponse, error)
	Update(ctx context.Context, in *CustomerChannel, opts ...client.CallOption) (*CustomerChannelResponse, error)
	Search(ctx context.Context, in *CustomerChannelWhere, opts ...client.CallOption) (*CustomerChannelResponse, error)
	List(ctx context.Context, in *CustomerChannelWhere, opts ...client.CallOption) (*CustomerChannelResponse, error)
	SetSorting(ctx context.Context, in *CustomerChannel, opts ...client.CallOption) (*CustomerChannelResponse, error)
	SetStatus(ctx context.Context, in *CustomerChannel, opts ...client.CallOption) (*CustomerChannelResponse, error)
	Delete(ctx context.Context, in *CustomerChannelWhere, opts ...client.CallOption) (*CustomerChannelResponse, error)
}

type customerChannelService struct {
	c    client.Client
	name string
}

func NewCustomerChannelService(name string, c client.Client) CustomerChannelService {
	return &customerChannelService{
		c:    c,
		name: name,
	}
}

func (c *customerChannelService) Create(ctx context.Context, in *CustomerChannel, opts ...client.CallOption) (*CustomerChannelResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerChannelService.Create", in)
	out := new(CustomerChannelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerChannelService) Update(ctx context.Context, in *CustomerChannel, opts ...client.CallOption) (*CustomerChannelResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerChannelService.Update", in)
	out := new(CustomerChannelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerChannelService) Search(ctx context.Context, in *CustomerChannelWhere, opts ...client.CallOption) (*CustomerChannelResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerChannelService.Search", in)
	out := new(CustomerChannelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerChannelService) List(ctx context.Context, in *CustomerChannelWhere, opts ...client.CallOption) (*CustomerChannelResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerChannelService.List", in)
	out := new(CustomerChannelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerChannelService) SetSorting(ctx context.Context, in *CustomerChannel, opts ...client.CallOption) (*CustomerChannelResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerChannelService.SetSorting", in)
	out := new(CustomerChannelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerChannelService) SetStatus(ctx context.Context, in *CustomerChannel, opts ...client.CallOption) (*CustomerChannelResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerChannelService.SetStatus", in)
	out := new(CustomerChannelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerChannelService) Delete(ctx context.Context, in *CustomerChannelWhere, opts ...client.CallOption) (*CustomerChannelResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerChannelService.Delete", in)
	out := new(CustomerChannelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CustomerChannelService service

type CustomerChannelServiceHandler interface {
	Create(context.Context, *CustomerChannel, *CustomerChannelResponse) error
	Update(context.Context, *CustomerChannel, *CustomerChannelResponse) error
	Search(context.Context, *CustomerChannelWhere, *CustomerChannelResponse) error
	List(context.Context, *CustomerChannelWhere, *CustomerChannelResponse) error
	SetSorting(context.Context, *CustomerChannel, *CustomerChannelResponse) error
	SetStatus(context.Context, *CustomerChannel, *CustomerChannelResponse) error
	Delete(context.Context, *CustomerChannelWhere, *CustomerChannelResponse) error
}

func RegisterCustomerChannelServiceHandler(s server.Server, hdlr CustomerChannelServiceHandler, opts ...server.HandlerOption) error {
	type customerChannelService interface {
		Create(ctx context.Context, in *CustomerChannel, out *CustomerChannelResponse) error
		Update(ctx context.Context, in *CustomerChannel, out *CustomerChannelResponse) error
		Search(ctx context.Context, in *CustomerChannelWhere, out *CustomerChannelResponse) error
		List(ctx context.Context, in *CustomerChannelWhere, out *CustomerChannelResponse) error
		SetSorting(ctx context.Context, in *CustomerChannel, out *CustomerChannelResponse) error
		SetStatus(ctx context.Context, in *CustomerChannel, out *CustomerChannelResponse) error
		Delete(ctx context.Context, in *CustomerChannelWhere, out *CustomerChannelResponse) error
	}
	type CustomerChannelService struct {
		customerChannelService
	}
	h := &customerChannelServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CustomerChannelService{h}, opts...))
}

type customerChannelServiceHandler struct {
	CustomerChannelServiceHandler
}

func (h *customerChannelServiceHandler) Create(ctx context.Context, in *CustomerChannel, out *CustomerChannelResponse) error {
	return h.CustomerChannelServiceHandler.Create(ctx, in, out)
}

func (h *customerChannelServiceHandler) Update(ctx context.Context, in *CustomerChannel, out *CustomerChannelResponse) error {
	return h.CustomerChannelServiceHandler.Update(ctx, in, out)
}

func (h *customerChannelServiceHandler) Search(ctx context.Context, in *CustomerChannelWhere, out *CustomerChannelResponse) error {
	return h.CustomerChannelServiceHandler.Search(ctx, in, out)
}

func (h *customerChannelServiceHandler) List(ctx context.Context, in *CustomerChannelWhere, out *CustomerChannelResponse) error {
	return h.CustomerChannelServiceHandler.List(ctx, in, out)
}

func (h *customerChannelServiceHandler) SetSorting(ctx context.Context, in *CustomerChannel, out *CustomerChannelResponse) error {
	return h.CustomerChannelServiceHandler.SetSorting(ctx, in, out)
}

func (h *customerChannelServiceHandler) SetStatus(ctx context.Context, in *CustomerChannel, out *CustomerChannelResponse) error {
	return h.CustomerChannelServiceHandler.SetStatus(ctx, in, out)
}

func (h *customerChannelServiceHandler) Delete(ctx context.Context, in *CustomerChannelWhere, out *CustomerChannelResponse) error {
	return h.CustomerChannelServiceHandler.Delete(ctx, in, out)
}
