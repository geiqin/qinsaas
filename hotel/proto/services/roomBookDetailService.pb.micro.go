// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: roomBookDetailService.proto

package services

import (
	_ "github.com/geiqin/microkit/protobuf/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RoomBookDetailService service

func NewRoomBookDetailServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RoomBookDetailService service

type RoomBookDetailService interface {
	Search(ctx context.Context, in *RoomBookDetailWhere, opts ...client.CallOption) (*RoomBookDetailResponse, error)
	// 预定详情列表(可获取待入住/可退房列表)
	List(ctx context.Context, in *RoomBookDetailWhere, opts ...client.CallOption) (*RoomBookDetailResponse, error)
	// 取消预订
	Cancel(ctx context.Context, in *RoomBookDetailWhere, opts ...client.CallOption) (*RoomBookDetailResponse, error)
	// 排房
	ArrangeRoom(ctx context.Context, in *RoomBookDetailWhere, opts ...client.CallOption) (*RoomBookDetailResponse, error)
	// 取消排房
	CancelArrangeRoom(ctx context.Context, in *RoomBookDetailWhere, opts ...client.CallOption) (*RoomBookDetailResponse, error)
	// 办理入住
	Checkin(ctx context.Context, in *RoomBookDetail, opts ...client.CallOption) (*RoomBookDetailResponse, error)
	// 办理退房
	Checkout(ctx context.Context, in *RoomBookDetailWhere, opts ...client.CallOption) (*RoomBookDetailResponse, error)
	// 办理换房
	Exchange(ctx context.Context, in *RoomBookDetailWhere, opts ...client.CallOption) (*RoomBookDetailResponse, error)
}

type roomBookDetailService struct {
	c    client.Client
	name string
}

func NewRoomBookDetailService(name string, c client.Client) RoomBookDetailService {
	return &roomBookDetailService{
		c:    c,
		name: name,
	}
}

func (c *roomBookDetailService) Search(ctx context.Context, in *RoomBookDetailWhere, opts ...client.CallOption) (*RoomBookDetailResponse, error) {
	req := c.c.NewRequest(c.name, "RoomBookDetailService.Search", in)
	out := new(RoomBookDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomBookDetailService) List(ctx context.Context, in *RoomBookDetailWhere, opts ...client.CallOption) (*RoomBookDetailResponse, error) {
	req := c.c.NewRequest(c.name, "RoomBookDetailService.List", in)
	out := new(RoomBookDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomBookDetailService) Cancel(ctx context.Context, in *RoomBookDetailWhere, opts ...client.CallOption) (*RoomBookDetailResponse, error) {
	req := c.c.NewRequest(c.name, "RoomBookDetailService.Cancel", in)
	out := new(RoomBookDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomBookDetailService) ArrangeRoom(ctx context.Context, in *RoomBookDetailWhere, opts ...client.CallOption) (*RoomBookDetailResponse, error) {
	req := c.c.NewRequest(c.name, "RoomBookDetailService.ArrangeRoom", in)
	out := new(RoomBookDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomBookDetailService) CancelArrangeRoom(ctx context.Context, in *RoomBookDetailWhere, opts ...client.CallOption) (*RoomBookDetailResponse, error) {
	req := c.c.NewRequest(c.name, "RoomBookDetailService.CancelArrangeRoom", in)
	out := new(RoomBookDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomBookDetailService) Checkin(ctx context.Context, in *RoomBookDetail, opts ...client.CallOption) (*RoomBookDetailResponse, error) {
	req := c.c.NewRequest(c.name, "RoomBookDetailService.Checkin", in)
	out := new(RoomBookDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomBookDetailService) Checkout(ctx context.Context, in *RoomBookDetailWhere, opts ...client.CallOption) (*RoomBookDetailResponse, error) {
	req := c.c.NewRequest(c.name, "RoomBookDetailService.Checkout", in)
	out := new(RoomBookDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomBookDetailService) Exchange(ctx context.Context, in *RoomBookDetailWhere, opts ...client.CallOption) (*RoomBookDetailResponse, error) {
	req := c.c.NewRequest(c.name, "RoomBookDetailService.Exchange", in)
	out := new(RoomBookDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoomBookDetailService service

type RoomBookDetailServiceHandler interface {
	Search(context.Context, *RoomBookDetailWhere, *RoomBookDetailResponse) error
	// 预定详情列表(可获取待入住/可退房列表)
	List(context.Context, *RoomBookDetailWhere, *RoomBookDetailResponse) error
	// 取消预订
	Cancel(context.Context, *RoomBookDetailWhere, *RoomBookDetailResponse) error
	// 排房
	ArrangeRoom(context.Context, *RoomBookDetailWhere, *RoomBookDetailResponse) error
	// 取消排房
	CancelArrangeRoom(context.Context, *RoomBookDetailWhere, *RoomBookDetailResponse) error
	// 办理入住
	Checkin(context.Context, *RoomBookDetail, *RoomBookDetailResponse) error
	// 办理退房
	Checkout(context.Context, *RoomBookDetailWhere, *RoomBookDetailResponse) error
	// 办理换房
	Exchange(context.Context, *RoomBookDetailWhere, *RoomBookDetailResponse) error
}

func RegisterRoomBookDetailServiceHandler(s server.Server, hdlr RoomBookDetailServiceHandler, opts ...server.HandlerOption) error {
	type roomBookDetailService interface {
		Search(ctx context.Context, in *RoomBookDetailWhere, out *RoomBookDetailResponse) error
		List(ctx context.Context, in *RoomBookDetailWhere, out *RoomBookDetailResponse) error
		Cancel(ctx context.Context, in *RoomBookDetailWhere, out *RoomBookDetailResponse) error
		ArrangeRoom(ctx context.Context, in *RoomBookDetailWhere, out *RoomBookDetailResponse) error
		CancelArrangeRoom(ctx context.Context, in *RoomBookDetailWhere, out *RoomBookDetailResponse) error
		Checkin(ctx context.Context, in *RoomBookDetail, out *RoomBookDetailResponse) error
		Checkout(ctx context.Context, in *RoomBookDetailWhere, out *RoomBookDetailResponse) error
		Exchange(ctx context.Context, in *RoomBookDetailWhere, out *RoomBookDetailResponse) error
	}
	type RoomBookDetailService struct {
		roomBookDetailService
	}
	h := &roomBookDetailServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RoomBookDetailService{h}, opts...))
}

type roomBookDetailServiceHandler struct {
	RoomBookDetailServiceHandler
}

func (h *roomBookDetailServiceHandler) Search(ctx context.Context, in *RoomBookDetailWhere, out *RoomBookDetailResponse) error {
	return h.RoomBookDetailServiceHandler.Search(ctx, in, out)
}

func (h *roomBookDetailServiceHandler) List(ctx context.Context, in *RoomBookDetailWhere, out *RoomBookDetailResponse) error {
	return h.RoomBookDetailServiceHandler.List(ctx, in, out)
}

func (h *roomBookDetailServiceHandler) Cancel(ctx context.Context, in *RoomBookDetailWhere, out *RoomBookDetailResponse) error {
	return h.RoomBookDetailServiceHandler.Cancel(ctx, in, out)
}

func (h *roomBookDetailServiceHandler) ArrangeRoom(ctx context.Context, in *RoomBookDetailWhere, out *RoomBookDetailResponse) error {
	return h.RoomBookDetailServiceHandler.ArrangeRoom(ctx, in, out)
}

func (h *roomBookDetailServiceHandler) CancelArrangeRoom(ctx context.Context, in *RoomBookDetailWhere, out *RoomBookDetailResponse) error {
	return h.RoomBookDetailServiceHandler.CancelArrangeRoom(ctx, in, out)
}

func (h *roomBookDetailServiceHandler) Checkin(ctx context.Context, in *RoomBookDetail, out *RoomBookDetailResponse) error {
	return h.RoomBookDetailServiceHandler.Checkin(ctx, in, out)
}

func (h *roomBookDetailServiceHandler) Checkout(ctx context.Context, in *RoomBookDetailWhere, out *RoomBookDetailResponse) error {
	return h.RoomBookDetailServiceHandler.Checkout(ctx, in, out)
}

func (h *roomBookDetailServiceHandler) Exchange(ctx context.Context, in *RoomBookDetailWhere, out *RoomBookDetailResponse) error {
	return h.RoomBookDetailServiceHandler.Exchange(ctx, in, out)
}
