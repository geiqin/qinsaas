// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: roomPricePlanService.proto

package services

import (
	_ "github.com/geiqin/microkit/protobuf/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RoomPricePlanService service

func NewRoomPricePlanServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RoomPricePlanService service

type RoomPricePlanService interface {
	Create(ctx context.Context, in *RoomPricePlan, opts ...client.CallOption) (*RoomPricePlanResponse, error)
	Update(ctx context.Context, in *RoomPricePlan, opts ...client.CallOption) (*RoomPricePlanResponse, error)
	Delete(ctx context.Context, in *RoomPricePlanWhere, opts ...client.CallOption) (*RoomPricePlanResponse, error)
	Get(ctx context.Context, in *RoomPricePlan, opts ...client.CallOption) (*RoomPricePlanResponse, error)
	OpenOrClose(ctx context.Context, in *RoomPricePlanWhere, opts ...client.CallOption) (*RoomPricePlanResponse, error)
	SetGiftContent(ctx context.Context, in *RoomPricePlan, opts ...client.CallOption) (*RoomPricePlanResponse, error)
	ModifySort(ctx context.Context, in *RoomPricePlanWhere, opts ...client.CallOption) (*RoomPricePlanResponse, error)
}

type roomPricePlanService struct {
	c    client.Client
	name string
}

func NewRoomPricePlanService(name string, c client.Client) RoomPricePlanService {
	return &roomPricePlanService{
		c:    c,
		name: name,
	}
}

func (c *roomPricePlanService) Create(ctx context.Context, in *RoomPricePlan, opts ...client.CallOption) (*RoomPricePlanResponse, error) {
	req := c.c.NewRequest(c.name, "RoomPricePlanService.Create", in)
	out := new(RoomPricePlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomPricePlanService) Update(ctx context.Context, in *RoomPricePlan, opts ...client.CallOption) (*RoomPricePlanResponse, error) {
	req := c.c.NewRequest(c.name, "RoomPricePlanService.Update", in)
	out := new(RoomPricePlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomPricePlanService) Delete(ctx context.Context, in *RoomPricePlanWhere, opts ...client.CallOption) (*RoomPricePlanResponse, error) {
	req := c.c.NewRequest(c.name, "RoomPricePlanService.Delete", in)
	out := new(RoomPricePlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomPricePlanService) Get(ctx context.Context, in *RoomPricePlan, opts ...client.CallOption) (*RoomPricePlanResponse, error) {
	req := c.c.NewRequest(c.name, "RoomPricePlanService.Get", in)
	out := new(RoomPricePlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomPricePlanService) OpenOrClose(ctx context.Context, in *RoomPricePlanWhere, opts ...client.CallOption) (*RoomPricePlanResponse, error) {
	req := c.c.NewRequest(c.name, "RoomPricePlanService.OpenOrClose", in)
	out := new(RoomPricePlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomPricePlanService) SetGiftContent(ctx context.Context, in *RoomPricePlan, opts ...client.CallOption) (*RoomPricePlanResponse, error) {
	req := c.c.NewRequest(c.name, "RoomPricePlanService.SetGiftContent", in)
	out := new(RoomPricePlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomPricePlanService) ModifySort(ctx context.Context, in *RoomPricePlanWhere, opts ...client.CallOption) (*RoomPricePlanResponse, error) {
	req := c.c.NewRequest(c.name, "RoomPricePlanService.ModifySort", in)
	out := new(RoomPricePlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoomPricePlanService service

type RoomPricePlanServiceHandler interface {
	Create(context.Context, *RoomPricePlan, *RoomPricePlanResponse) error
	Update(context.Context, *RoomPricePlan, *RoomPricePlanResponse) error
	Delete(context.Context, *RoomPricePlanWhere, *RoomPricePlanResponse) error
	Get(context.Context, *RoomPricePlan, *RoomPricePlanResponse) error
	OpenOrClose(context.Context, *RoomPricePlanWhere, *RoomPricePlanResponse) error
	SetGiftContent(context.Context, *RoomPricePlan, *RoomPricePlanResponse) error
	ModifySort(context.Context, *RoomPricePlanWhere, *RoomPricePlanResponse) error
}

func RegisterRoomPricePlanServiceHandler(s server.Server, hdlr RoomPricePlanServiceHandler, opts ...server.HandlerOption) error {
	type roomPricePlanService interface {
		Create(ctx context.Context, in *RoomPricePlan, out *RoomPricePlanResponse) error
		Update(ctx context.Context, in *RoomPricePlan, out *RoomPricePlanResponse) error
		Delete(ctx context.Context, in *RoomPricePlanWhere, out *RoomPricePlanResponse) error
		Get(ctx context.Context, in *RoomPricePlan, out *RoomPricePlanResponse) error
		OpenOrClose(ctx context.Context, in *RoomPricePlanWhere, out *RoomPricePlanResponse) error
		SetGiftContent(ctx context.Context, in *RoomPricePlan, out *RoomPricePlanResponse) error
		ModifySort(ctx context.Context, in *RoomPricePlanWhere, out *RoomPricePlanResponse) error
	}
	type RoomPricePlanService struct {
		roomPricePlanService
	}
	h := &roomPricePlanServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RoomPricePlanService{h}, opts...))
}

type roomPricePlanServiceHandler struct {
	RoomPricePlanServiceHandler
}

func (h *roomPricePlanServiceHandler) Create(ctx context.Context, in *RoomPricePlan, out *RoomPricePlanResponse) error {
	return h.RoomPricePlanServiceHandler.Create(ctx, in, out)
}

func (h *roomPricePlanServiceHandler) Update(ctx context.Context, in *RoomPricePlan, out *RoomPricePlanResponse) error {
	return h.RoomPricePlanServiceHandler.Update(ctx, in, out)
}

func (h *roomPricePlanServiceHandler) Delete(ctx context.Context, in *RoomPricePlanWhere, out *RoomPricePlanResponse) error {
	return h.RoomPricePlanServiceHandler.Delete(ctx, in, out)
}

func (h *roomPricePlanServiceHandler) Get(ctx context.Context, in *RoomPricePlan, out *RoomPricePlanResponse) error {
	return h.RoomPricePlanServiceHandler.Get(ctx, in, out)
}

func (h *roomPricePlanServiceHandler) OpenOrClose(ctx context.Context, in *RoomPricePlanWhere, out *RoomPricePlanResponse) error {
	return h.RoomPricePlanServiceHandler.OpenOrClose(ctx, in, out)
}

func (h *roomPricePlanServiceHandler) SetGiftContent(ctx context.Context, in *RoomPricePlan, out *RoomPricePlanResponse) error {
	return h.RoomPricePlanServiceHandler.SetGiftContent(ctx, in, out)
}

func (h *roomPricePlanServiceHandler) ModifySort(ctx context.Context, in *RoomPricePlanWhere, out *RoomPricePlanResponse) error {
	return h.RoomPricePlanServiceHandler.ModifySort(ctx, in, out)
}
