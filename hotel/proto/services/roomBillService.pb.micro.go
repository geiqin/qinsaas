// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: roomBillService.proto

package services

import (
	_ "github.com/geiqin/microkit/protobuf/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RoomBillService service

func NewRoomBillServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RoomBillService service

type RoomBillService interface {
	// 获取账单信息
	Get(ctx context.Context, in *RoomBillWhere, opts ...client.CallOption) (*RoomBillResponse, error)
	// 结算账单
	Settlement(ctx context.Context, in *RoomBillWhere, opts ...client.CallOption) (*RoomBillResponse, error)
}

type roomBillService struct {
	c    client.Client
	name string
}

func NewRoomBillService(name string, c client.Client) RoomBillService {
	return &roomBillService{
		c:    c,
		name: name,
	}
}

func (c *roomBillService) Get(ctx context.Context, in *RoomBillWhere, opts ...client.CallOption) (*RoomBillResponse, error) {
	req := c.c.NewRequest(c.name, "RoomBillService.Get", in)
	out := new(RoomBillResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomBillService) Settlement(ctx context.Context, in *RoomBillWhere, opts ...client.CallOption) (*RoomBillResponse, error) {
	req := c.c.NewRequest(c.name, "RoomBillService.Settlement", in)
	out := new(RoomBillResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoomBillService service

type RoomBillServiceHandler interface {
	// 获取账单信息
	Get(context.Context, *RoomBillWhere, *RoomBillResponse) error
	// 结算账单
	Settlement(context.Context, *RoomBillWhere, *RoomBillResponse) error
}

func RegisterRoomBillServiceHandler(s server.Server, hdlr RoomBillServiceHandler, opts ...server.HandlerOption) error {
	type roomBillService interface {
		Get(ctx context.Context, in *RoomBillWhere, out *RoomBillResponse) error
		Settlement(ctx context.Context, in *RoomBillWhere, out *RoomBillResponse) error
	}
	type RoomBillService struct {
		roomBillService
	}
	h := &roomBillServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RoomBillService{h}, opts...))
}

type roomBillServiceHandler struct {
	RoomBillServiceHandler
}

func (h *roomBillServiceHandler) Get(ctx context.Context, in *RoomBillWhere, out *RoomBillResponse) error {
	return h.RoomBillServiceHandler.Get(ctx, in, out)
}

func (h *roomBillServiceHandler) Settlement(ctx context.Context, in *RoomBillWhere, out *RoomBillResponse) error {
	return h.RoomBillServiceHandler.Settlement(ctx, in, out)
}
