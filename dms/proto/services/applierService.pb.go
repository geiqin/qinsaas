// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: applierService.proto

package services

import (
	common "github.com/geiqin/microkit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ApplierWhere struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paged    int32   `protobuf:"varint,1,opt,name=paged,proto3" json:"paged,omitempty"`
	PageSize int32   `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Top      int32   `protobuf:"varint,3,opt,name=top,proto3" json:"top,omitempty"`
	Id       int64   `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	Mobile   string  `protobuf:"bytes,5,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Keywords string  `protobuf:"bytes,6,opt,name=keywords,proto3" json:"keywords,omitempty"`
	Status   string  `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Ids      []int64 `protobuf:"varint,8,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	RankType string  `protobuf:"bytes,9,opt,name=rank_type,json=rankType,proto3" json:"rank_type,omitempty"`
}

func (x *ApplierWhere) Reset() {
	*x = ApplierWhere{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applierService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplierWhere) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplierWhere) ProtoMessage() {}

func (x *ApplierWhere) ProtoReflect() protoreflect.Message {
	mi := &file_applierService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplierWhere.ProtoReflect.Descriptor instead.
func (*ApplierWhere) Descriptor() ([]byte, []int) {
	return file_applierService_proto_rawDescGZIP(), []int{0}
}

func (x *ApplierWhere) GetPaged() int32 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *ApplierWhere) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ApplierWhere) GetTop() int32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *ApplierWhere) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ApplierWhere) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *ApplierWhere) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *ApplierWhere) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApplierWhere) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ApplierWhere) GetRankType() string {
	if x != nil {
		return x.RankType
	}
	return ""
}

type Applier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DistributorId int64                 `protobuf:"varint,2,opt,name=distributor_id,json=distributorId,proto3" json:"distributor_id,omitempty"`
	RankId        int32                 `protobuf:"varint,3,opt,name=rank_id,json=rankId,proto3" json:"rank_id,omitempty"`
	DisplayName   string                `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Autoed        bool                  `protobuf:"varint,5,opt,name=autoed,proto3" json:"autoed,omitempty"`
	CustomerId    int64                 `protobuf:"varint,6,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Status        string                `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Reason        string                `protobuf:"bytes,8,opt,name=reason,proto3" json:"reason,omitempty"`
	Remarks       string                `protobuf:"bytes,9,opt,name=remarks,proto3" json:"remarks,omitempty"`
	Addons        string                `protobuf:"bytes,10,opt,name=addons,proto3" json:"addons,omitempty"`
	CreatedAt     string                `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     string                `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Distributor   *Distributor          `protobuf:"bytes,13,opt,name=distributor,proto3" json:"distributor,omitempty"`
	Rank          *Rank                 `protobuf:"bytes,14,opt,name=rank,proto3" json:"rank,omitempty"`
	InviteSn      string                `protobuf:"bytes,15,opt,name=invite_sn,json=inviteSn,proto3" json:"invite_sn,omitempty"`
	Condition     *ApplierCondition     `protobuf:"bytes,16,opt,name=condition,proto3" json:"condition,omitempty"`
	MeetCondition *ApplierMeetCondition `protobuf:"bytes,17,opt,name=meet_condition,json=meetCondition,proto3" json:"meet_condition,omitempty"`
	RankType      string                `protobuf:"bytes,18,opt,name=rank_type,json=rankType,proto3" json:"rank_type,omitempty"`
	Mobile        string                `protobuf:"bytes,19,opt,name=mobile,proto3" json:"mobile,omitempty"`
	InviteName    string                `protobuf:"bytes,20,opt,name=invite_name,json=inviteName,proto3" json:"invite_name,omitempty"`
	RankName      string                `protobuf:"bytes,21,opt,name=rank_name,json=rankName,proto3" json:"rank_name,omitempty"`
}

func (x *Applier) Reset() {
	*x = Applier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applierService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Applier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Applier) ProtoMessage() {}

func (x *Applier) ProtoReflect() protoreflect.Message {
	mi := &file_applierService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Applier.ProtoReflect.Descriptor instead.
func (*Applier) Descriptor() ([]byte, []int) {
	return file_applierService_proto_rawDescGZIP(), []int{1}
}

func (x *Applier) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Applier) GetDistributorId() int64 {
	if x != nil {
		return x.DistributorId
	}
	return 0
}

func (x *Applier) GetRankId() int32 {
	if x != nil {
		return x.RankId
	}
	return 0
}

func (x *Applier) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Applier) GetAutoed() bool {
	if x != nil {
		return x.Autoed
	}
	return false
}

func (x *Applier) GetCustomerId() int64 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *Applier) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Applier) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Applier) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *Applier) GetAddons() string {
	if x != nil {
		return x.Addons
	}
	return ""
}

func (x *Applier) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Applier) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Applier) GetDistributor() *Distributor {
	if x != nil {
		return x.Distributor
	}
	return nil
}

func (x *Applier) GetRank() *Rank {
	if x != nil {
		return x.Rank
	}
	return nil
}

func (x *Applier) GetInviteSn() string {
	if x != nil {
		return x.InviteSn
	}
	return ""
}

func (x *Applier) GetCondition() *ApplierCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Applier) GetMeetCondition() *ApplierMeetCondition {
	if x != nil {
		return x.MeetCondition
	}
	return nil
}

func (x *Applier) GetRankType() string {
	if x != nil {
		return x.RankType
	}
	return ""
}

func (x *Applier) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *Applier) GetInviteName() string {
	if x != nil {
		return x.InviteName
	}
	return ""
}

func (x *Applier) GetRankName() string {
	if x != nil {
		return x.RankName
	}
	return ""
}

type ApplierResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity *Applier      `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Pager  *common.Pager `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager,omitempty"`
	Items  []*Applier    `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	Error  *common.Error `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Info   *common.Info  `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *ApplierResponse) Reset() {
	*x = ApplierResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applierService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplierResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplierResponse) ProtoMessage() {}

func (x *ApplierResponse) ProtoReflect() protoreflect.Message {
	mi := &file_applierService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplierResponse.ProtoReflect.Descriptor instead.
func (*ApplierResponse) Descriptor() ([]byte, []int) {
	return file_applierService_proto_rawDescGZIP(), []int{2}
}

func (x *ApplierResponse) GetEntity() *Applier {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *ApplierResponse) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *ApplierResponse) GetItems() []*Applier {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ApplierResponse) GetError() *common.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ApplierResponse) GetInfo() *common.Info {
	if x != nil {
		return x.Info
	}
	return nil
}

type ApplyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsApply       bool                    `protobuf:"varint,1,opt,name=is_apply,json=isApply,proto3" json:"is_apply,omitempty"`
	Applier       *Applier                `protobuf:"bytes,2,opt,name=applier,proto3" json:"applier,omitempty"`
	Ranks         []*Rank                 `protobuf:"bytes,3,rep,name=ranks,proto3" json:"ranks,omitempty"`
	Condition     []*ApplierCondition     `protobuf:"bytes,4,rep,name=condition,proto3" json:"condition,omitempty"`
	MeetCondition []*ApplierMeetCondition `protobuf:"bytes,5,rep,name=meet_condition,json=meetCondition,proto3" json:"meet_condition,omitempty"`
}

func (x *ApplyInfo) Reset() {
	*x = ApplyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applierService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyInfo) ProtoMessage() {}

func (x *ApplyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_applierService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyInfo.ProtoReflect.Descriptor instead.
func (*ApplyInfo) Descriptor() ([]byte, []int) {
	return file_applierService_proto_rawDescGZIP(), []int{3}
}

func (x *ApplyInfo) GetIsApply() bool {
	if x != nil {
		return x.IsApply
	}
	return false
}

func (x *ApplyInfo) GetApplier() *Applier {
	if x != nil {
		return x.Applier
	}
	return nil
}

func (x *ApplyInfo) GetRanks() []*Rank {
	if x != nil {
		return x.Ranks
	}
	return nil
}

func (x *ApplyInfo) GetCondition() []*ApplierCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *ApplyInfo) GetMeetCondition() []*ApplierMeetCondition {
	if x != nil {
		return x.MeetCondition
	}
	return nil
}

type ApplyInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity *ApplyInfo    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Error  *common.Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Info   *common.Info  `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *ApplyInfoResponse) Reset() {
	*x = ApplyInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applierService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyInfoResponse) ProtoMessage() {}

func (x *ApplyInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_applierService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyInfoResponse.ProtoReflect.Descriptor instead.
func (*ApplyInfoResponse) Descriptor() ([]byte, []int) {
	return file_applierService_proto_rawDescGZIP(), []int{4}
}

func (x *ApplyInfoResponse) GetEntity() *ApplyInfo {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *ApplyInfoResponse) GetError() *common.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ApplyInfoResponse) GetInfo() *common.Info {
	if x != nil {
		return x.Info
	}
	return nil
}

// 加入销售员的配置条件
type ApplierCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankId            int32             `protobuf:"varint,1,opt,name=rank_id,json=rankId,proto3" json:"rank_id,omitempty"`
	IsBought          bool              `protobuf:"varint,2,opt,name=is_bought,json=isBought,proto3" json:"is_bought,omitempty"`
	ConsumptionAmount float32           `protobuf:"fixed32,3,opt,name=consumption_amount,json=consumptionAmount,proto3" json:"consumption_amount,omitempty"`
	ConsumptionNum    int32             `protobuf:"varint,4,opt,name=consumption_num,json=consumptionNum,proto3" json:"consumption_num,omitempty"`
	IsBindIdcard      bool              `protobuf:"varint,5,opt,name=is_bind_idcard,json=isBindIdcard,proto3" json:"is_bind_idcard,omitempty"`
	IsBindMobile      bool              `protobuf:"varint,6,opt,name=is_bind_mobile,json=isBindMobile,proto3" json:"is_bind_mobile,omitempty"`
	IsInformation     bool              `protobuf:"varint,7,opt,name=is_information,json=isInformation,proto3" json:"is_information,omitempty"`
	InformationFields string            `protobuf:"bytes,8,opt,name=information_fields,json=informationFields,proto3" json:"information_fields,omitempty"`
	Joined            bool              `protobuf:"varint,9,opt,name=joined,proto3" json:"joined,omitempty"`
	JoinAmount        float32           `protobuf:"fixed32,10,opt,name=join_amount,json=joinAmount,proto3" json:"join_amount,omitempty"`
	PromotionAmount   float32           `protobuf:"fixed32,11,opt,name=promotion_amount,json=promotionAmount,proto3" json:"promotion_amount,omitempty"`
	PrimaryNum        int32             `protobuf:"varint,12,opt,name=primary_num,json=primaryNum,proto3" json:"primary_num,omitempty"`
	SecondNum         int32             `protobuf:"varint,13,opt,name=second_num,json=secondNum,proto3" json:"second_num,omitempty"`
	GoodsCondition    []*GoodsCondition `protobuf:"bytes,14,rep,name=goods_condition,json=goodsCondition,proto3" json:"goods_condition,omitempty"`
}

func (x *ApplierCondition) Reset() {
	*x = ApplierCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applierService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplierCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplierCondition) ProtoMessage() {}

func (x *ApplierCondition) ProtoReflect() protoreflect.Message {
	mi := &file_applierService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplierCondition.ProtoReflect.Descriptor instead.
func (*ApplierCondition) Descriptor() ([]byte, []int) {
	return file_applierService_proto_rawDescGZIP(), []int{5}
}

func (x *ApplierCondition) GetRankId() int32 {
	if x != nil {
		return x.RankId
	}
	return 0
}

func (x *ApplierCondition) GetIsBought() bool {
	if x != nil {
		return x.IsBought
	}
	return false
}

func (x *ApplierCondition) GetConsumptionAmount() float32 {
	if x != nil {
		return x.ConsumptionAmount
	}
	return 0
}

func (x *ApplierCondition) GetConsumptionNum() int32 {
	if x != nil {
		return x.ConsumptionNum
	}
	return 0
}

func (x *ApplierCondition) GetIsBindIdcard() bool {
	if x != nil {
		return x.IsBindIdcard
	}
	return false
}

func (x *ApplierCondition) GetIsBindMobile() bool {
	if x != nil {
		return x.IsBindMobile
	}
	return false
}

func (x *ApplierCondition) GetIsInformation() bool {
	if x != nil {
		return x.IsInformation
	}
	return false
}

func (x *ApplierCondition) GetInformationFields() string {
	if x != nil {
		return x.InformationFields
	}
	return ""
}

func (x *ApplierCondition) GetJoined() bool {
	if x != nil {
		return x.Joined
	}
	return false
}

func (x *ApplierCondition) GetJoinAmount() float32 {
	if x != nil {
		return x.JoinAmount
	}
	return 0
}

func (x *ApplierCondition) GetPromotionAmount() float32 {
	if x != nil {
		return x.PromotionAmount
	}
	return 0
}

func (x *ApplierCondition) GetPrimaryNum() int32 {
	if x != nil {
		return x.PrimaryNum
	}
	return 0
}

func (x *ApplierCondition) GetSecondNum() int32 {
	if x != nil {
		return x.SecondNum
	}
	return 0
}

func (x *ApplierCondition) GetGoodsCondition() []*GoodsCondition {
	if x != nil {
		return x.GoodsCondition
	}
	return nil
}

// 满足加入销售员配置条件项
type ApplierMeetCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankId               int32 `protobuf:"varint,1,opt,name=rank_id,json=rankId,proto3" json:"rank_id,omitempty"`
	HasBought            bool  `protobuf:"varint,2,opt,name=has_bought,json=hasBought,proto3" json:"has_bought,omitempty"`                                    // 指定购买商品是否达标
	HasConsumptionAmount bool  `protobuf:"varint,3,opt,name=has_consumption_amount,json=hasConsumptionAmount,proto3" json:"has_consumption_amount,omitempty"` // 自购金额是否达标
	HasConsumptionNum    bool  `protobuf:"varint,4,opt,name=has_consumption_num,json=hasConsumptionNum,proto3" json:"has_consumption_num,omitempty"`          // 最低消费笔数是否达标
	HasBindIdcard        bool  `protobuf:"varint,5,opt,name=has_bind_idcard,json=hasBindIdcard,proto3" json:"has_bind_idcard,omitempty"`                      // 是否已实名认证
	HasBindMobile        bool  `protobuf:"varint,6,opt,name=has_bind_mobile,json=hasBindMobile,proto3" json:"has_bind_mobile,omitempty"`                      // 是否已绑定手机号
	HasInformation       bool  `protobuf:"varint,7,opt,name=has_information,json=hasInformation,proto3" json:"has_information,omitempty"`
	HasJoined            bool  `protobuf:"varint,8,opt,name=has_joined,json=hasJoined,proto3" json:"has_joined,omitempty"`
	HasPromotionAmount   bool  `protobuf:"varint,9,opt,name=has_promotion_amount,json=hasPromotionAmount,proto3" json:"has_promotion_amount,omitempty"` // 推广金是否达标
	HasPrimaryNum        bool  `protobuf:"varint,10,opt,name=has_primary_num,json=hasPrimaryNum,proto3" json:"has_primary_num,omitempty"`               // 一级分销员人数是否达标
	HasSecondNum         bool  `protobuf:"varint,11,opt,name=has_second_num,json=hasSecondNum,proto3" json:"has_second_num,omitempty"`                  // 二级分销员人数是否达标
}

func (x *ApplierMeetCondition) Reset() {
	*x = ApplierMeetCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applierService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplierMeetCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplierMeetCondition) ProtoMessage() {}

func (x *ApplierMeetCondition) ProtoReflect() protoreflect.Message {
	mi := &file_applierService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplierMeetCondition.ProtoReflect.Descriptor instead.
func (*ApplierMeetCondition) Descriptor() ([]byte, []int) {
	return file_applierService_proto_rawDescGZIP(), []int{6}
}

func (x *ApplierMeetCondition) GetRankId() int32 {
	if x != nil {
		return x.RankId
	}
	return 0
}

func (x *ApplierMeetCondition) GetHasBought() bool {
	if x != nil {
		return x.HasBought
	}
	return false
}

func (x *ApplierMeetCondition) GetHasConsumptionAmount() bool {
	if x != nil {
		return x.HasConsumptionAmount
	}
	return false
}

func (x *ApplierMeetCondition) GetHasConsumptionNum() bool {
	if x != nil {
		return x.HasConsumptionNum
	}
	return false
}

func (x *ApplierMeetCondition) GetHasBindIdcard() bool {
	if x != nil {
		return x.HasBindIdcard
	}
	return false
}

func (x *ApplierMeetCondition) GetHasBindMobile() bool {
	if x != nil {
		return x.HasBindMobile
	}
	return false
}

func (x *ApplierMeetCondition) GetHasInformation() bool {
	if x != nil {
		return x.HasInformation
	}
	return false
}

func (x *ApplierMeetCondition) GetHasJoined() bool {
	if x != nil {
		return x.HasJoined
	}
	return false
}

func (x *ApplierMeetCondition) GetHasPromotionAmount() bool {
	if x != nil {
		return x.HasPromotionAmount
	}
	return false
}

func (x *ApplierMeetCondition) GetHasPrimaryNum() bool {
	if x != nil {
		return x.HasPrimaryNum
	}
	return false
}

func (x *ApplierMeetCondition) GetHasSecondNum() bool {
	if x != nil {
		return x.HasSecondNum
	}
	return false
}

var File_applierService_proto protoreflect.FileDescriptor

var file_applierService_proto_rawDesc = []byte{
	0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x72,
	0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xde, 0x01,
	0x0a, 0x0c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x57, 0x68, 0x65, 0x72, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70,
	0x61, 0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x74, 0x6f, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc3,
	0x05, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x75, 0x74, 0x6f, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61,
	0x75, 0x74, 0x6f, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x12,
	0x22, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x6e,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0e, 0x6d, 0x65,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x6d, 0x65, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x06, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x72, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xfa, 0x01, 0x0a, 0x09, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x12, 0x2b, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x05, 0x72,
	0x61, 0x6e, 0x6b, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x0e, 0x6d, 0x65, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6d, 0x65, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x20, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0xa9, 0x04, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x69, 0x64,
	0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x42, 0x69,
	0x6e, 0x64, 0x49, 0x64, 0x63, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x62,
	0x69, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x41, 0x0a, 0x0f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcc, 0x03, 0x0a, 0x14,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x12, 0x34, 0x0a, 0x16,
	0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x68, 0x61,
	0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x69,
	0x64, 0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73,
	0x42, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x63, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61,
	0x73, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x68,
	0x61, 0x73, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x68, 0x61, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x61,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x61, 0x73, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x68, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61,
	0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x32, 0xa9, 0x02, 0x0a, 0x10, 0x4d,
	0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x33, 0x0a, 0x05, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x0d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x06, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x11, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x1a,
	0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x06,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xbf, 0x01, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x12, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x35, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x1a, 0x19, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x06, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x57, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x19, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_applierService_proto_rawDescOnce sync.Once
	file_applierService_proto_rawDescData = file_applierService_proto_rawDesc
)

func file_applierService_proto_rawDescGZIP() []byte {
	file_applierService_proto_rawDescOnce.Do(func() {
		file_applierService_proto_rawDescData = protoimpl.X.CompressGZIP(file_applierService_proto_rawDescData)
	})
	return file_applierService_proto_rawDescData
}

var file_applierService_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_applierService_proto_goTypes = []interface{}{
	(*ApplierWhere)(nil),         // 0: services.ApplierWhere
	(*Applier)(nil),              // 1: services.Applier
	(*ApplierResponse)(nil),      // 2: services.ApplierResponse
	(*ApplyInfo)(nil),            // 3: services.ApplyInfo
	(*ApplyInfoResponse)(nil),    // 4: services.ApplyInfoResponse
	(*ApplierCondition)(nil),     // 5: services.ApplierCondition
	(*ApplierMeetCondition)(nil), // 6: services.ApplierMeetCondition
	(*Distributor)(nil),          // 7: services.Distributor
	(*Rank)(nil),                 // 8: services.Rank
	(*common.Pager)(nil),         // 9: common.Pager
	(*common.Error)(nil),         // 10: common.Error
	(*common.Info)(nil),          // 11: common.Info
	(*GoodsCondition)(nil),       // 12: services.GoodsCondition
	(*common.Empty)(nil),         // 13: common.Empty
}
var file_applierService_proto_depIdxs = []int32{
	7,  // 0: services.Applier.distributor:type_name -> services.Distributor
	8,  // 1: services.Applier.rank:type_name -> services.Rank
	5,  // 2: services.Applier.condition:type_name -> services.ApplierCondition
	6,  // 3: services.Applier.meet_condition:type_name -> services.ApplierMeetCondition
	1,  // 4: services.ApplierResponse.entity:type_name -> services.Applier
	9,  // 5: services.ApplierResponse.pager:type_name -> common.Pager
	1,  // 6: services.ApplierResponse.items:type_name -> services.Applier
	10, // 7: services.ApplierResponse.error:type_name -> common.Error
	11, // 8: services.ApplierResponse.info:type_name -> common.Info
	1,  // 9: services.ApplyInfo.applier:type_name -> services.Applier
	8,  // 10: services.ApplyInfo.ranks:type_name -> services.Rank
	5,  // 11: services.ApplyInfo.condition:type_name -> services.ApplierCondition
	6,  // 12: services.ApplyInfo.meet_condition:type_name -> services.ApplierMeetCondition
	3,  // 13: services.ApplyInfoResponse.entity:type_name -> services.ApplyInfo
	10, // 14: services.ApplyInfoResponse.error:type_name -> common.Error
	11, // 15: services.ApplyInfoResponse.info:type_name -> common.Info
	12, // 16: services.ApplierCondition.goods_condition:type_name -> services.GoodsCondition
	13, // 17: services.MyApplierService.Check:input_type -> common.Empty
	13, // 18: services.MyApplierService.Apply:input_type -> common.Empty
	1,  // 19: services.MyApplierService.Submit:input_type -> services.Applier
	1,  // 20: services.MyApplierService.Get:input_type -> services.Applier
	1,  // 21: services.MyApplierService.Exists:input_type -> services.Applier
	1,  // 22: services.ApplierService.Check:input_type -> services.Applier
	1,  // 23: services.ApplierService.Get:input_type -> services.Applier
	0,  // 24: services.ApplierService.Search:input_type -> services.ApplierWhere
	2,  // 25: services.MyApplierService.Check:output_type -> services.ApplierResponse
	4,  // 26: services.MyApplierService.Apply:output_type -> services.ApplyInfoResponse
	2,  // 27: services.MyApplierService.Submit:output_type -> services.ApplierResponse
	2,  // 28: services.MyApplierService.Get:output_type -> services.ApplierResponse
	2,  // 29: services.MyApplierService.Exists:output_type -> services.ApplierResponse
	2,  // 30: services.ApplierService.Check:output_type -> services.ApplierResponse
	2,  // 31: services.ApplierService.Get:output_type -> services.ApplierResponse
	2,  // 32: services.ApplierService.Search:output_type -> services.ApplierResponse
	25, // [25:33] is the sub-list for method output_type
	17, // [17:25] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_applierService_proto_init() }
func file_applierService_proto_init() {
	if File_applierService_proto != nil {
		return
	}
	file_distributorService_proto_init()
	file_rankService_proto_init()
	file_goodsConditionService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_applierService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplierWhere); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applierService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Applier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applierService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplierResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applierService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applierService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applierService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplierCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applierService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplierMeetCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_applierService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_applierService_proto_goTypes,
		DependencyIndexes: file_applierService_proto_depIdxs,
		MessageInfos:      file_applierService_proto_msgTypes,
	}.Build()
	File_applierService_proto = out.File
	file_applierService_proto_rawDesc = nil
	file_applierService_proto_goTypes = nil
	file_applierService_proto_depIdxs = nil
}
